TIMElong <- arrange(TIMElong, ClientID, Index)
head(TIMElong)
str(TIMElong)
set.seed(210529)
TIMElong <- TIMElong[-sample(1:nrow(TIMElong), 5000),]
rndm30time <- subset(TIMElong, ClientID %in% sample(unique(TIMElong$ClientID), 30))
ggplot(data = rndm30time, aes(x = Weeks, y = Anxiety)) + geom_point() + geom_line() +
facet_wrap(~ClientID)
ggplot(data = rndm30time, aes(x = Weeks, y = Anxiety)) + geom_point() +
stat_smooth(method = "lm", se = FALSE) + facet_wrap(~ClientID)
M1a <- lme4::lmer(Anxiety ~1 +(1 | ClientID), TIMElong, REML = FALSE)
summary(M1a)
sjPlot::tab_model(M1a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
sjPlot::plot_model (M1a, type="diag")
#with lme4 package
M2a <- lme4::lmer(Anxiety ~ Weeks +(Weeks | ClientID), TIMElong, REML = FALSE)
summary(M2a )
sjPlot::tab_model(M1a, M2a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1", "Mod2"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
sjPlot::plot_model (M2a, type="pred", vars="Weeks")
sjPlot::plot_model (M2a, type="pred", terms=c("Weeks"))
#Entering the intercorrelations, means, and standard deviations from the journal article
Lewis_generating_model <- '
#measurement model
GRMS  =~ .69*Ob1 + .69*Ob2 + .60*Ob3 + .59*Ob4 + .55*Ob5 + .55*Ob6 + .54*Ob7 + .50*Ob8 + .41*Ob9 + .41*Ob10 + .93*Ma1 + .81*Ma2 + .69*Ma3 + .67*Ma4 + .61*Ma5 + .58*Ma6 + .54*Ma7 + .59*St1 + .55*St2 + .54*St3 + .54*St4 + .51*St5 + .70*An1 + .69*An2 + .68*An3
MntlHlth  =~ .8*MH1 + .8*MH2 + .8*MH3 + .8*MH4 + .8*MH5 + .8*MH6
PhysHlth  =~ .8*PhH1 + .8*PhH2 + .8*PhH3 + .8*PhH4 + .8*PhH5 + .8*PhH6
Spirituality  =~ .8*Spirit1 + .8*Spirit2
SocSupport  =~ .8*SocS1 + .8*SocS2
Engagement  =~ .8*Eng1 + .8*Eng2
Disengagement  =~  .8*dEng1 + .8*dEng2
GRIC  =~ .8*Cntrlty1 + .8*Cntrlty2 + .8*Cntrlty3 + .8*Cntrlty4 + .8*Cntrlty5 + .8*Cntrlty6 + .8*Cntrlty7 + .8*Cntrlty8 + .8*Cntrlty9 + .8*Cntrlty10
#Means
GRMS ~ 1.99*1
Spirituality ~2.82*1
SocSupport ~ 2.48*1
Engagement ~ 2.32*1
Disengagement ~ 1.75*1
GRIC ~ 5.71*1
MntlHlth ~3.56*1 #Lewis et al used sums instead of means, I recast as means to facilitate simulation
PhysHlth ~ 3.51*1 #Lewis et al used sums instead of means, I recast as means to facilitate simulation
#Correlations
GRMS ~ 0.20*Spirituality
GRMS ~ 0.28*SocSupport
GRMS ~ 0.30*Engagement
GRMS ~ 0.41*Disengagement
GRMS ~ 0.19*GRIC
GRMS ~ -0.32*MntlHlth
GRMS ~ -0.18*PhysHlth
Spirituality ~ 0.49*SocSupport
Spirituality ~ 0.57*Engagement
Spirituality ~ 0.22*Disengagement
Spirituality ~ 0.12*GRIC
Spirituality ~ -0.06*MntlHlth
Spirituality ~ -0.13*PhysHlth
SocSupport ~ 0.46*Engagement
SocSupport ~ 0.26*Disengagement
SocSupport ~ 0.38*GRIC
SocSupport ~ -0.18*MntlHlth
SocSupport ~ -0.08*PhysHlth
Engagement ~ 0.37*Disengagement
Engagement ~ 0.08*GRIC
Engagement ~ -0.14*MntlHlth
Engagement ~ -0.06*PhysHlth
Disengagement ~ 0.05*GRIC
Disengagement ~ -0.54*MntlHlth
Disengagement ~ -0.28*PhysHlth
GRIC ~ -0.10*MntlHlth
GRIC ~ 0.14*PhysHlth
MntlHlth ~ 0.47*PhysHlth
'
set.seed(230925)
dfLewis <- lavaan::simulateData(model = Lewis_generating_model,
model.type = "sem",
meanstructure = T,
sample.nobs=231,
standardized=FALSE)
#used to retrieve column indices used in the rescaling script below
#col_index <- as.data.frame(colnames(dfLewis))
for(i in 1:ncol(dfLewis)){  # for loop to go through each column of the dataframe
if(i >= 1 & i <= 25){   # apply only to GRMS variables
dfLewis[,i] <- scales::rescale(dfLewis[,i], c(0, 5))
}
if(i >= 26 & i <= 37){   # apply only to mental and physical health variables
dfLewis[,i] <- scales::rescale(dfLewis[,i], c(0, 6))
}
if(i >= 38 & i <= 45){   # apply only to coping variables
dfLewis[,i] <- scales::rescale(dfLewis[,i], c(1, 4))
}
if(i >= 46 & i <= 55){   # apply only to GRIC variables
dfLewis[,i] <- scales::rescale(dfLewis[,i], c(1, 7))
}
}
#rounding to integers so that the data resembles that which was collected
library(tidyverse)
dfLewis <- dfLewis %>% round(0)
#quick check of my work
#psych::describe(dfLewis)
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
options(scipen=999)#eliminates scientific notation
5.36 + 4.04*(3)
library(tidyverse)
set.seed(200513)
n_client = 12825
n_session = 5
b0 = 2.03 #intercept for anxiety
b1 = -.22 #b weight for L1 session
b2 = .13 #b weight for L2 sexual identity
b3 =  -.03 #b weight for L2 Rel1 (D-R vs ND-R & ND-U)
b4 = .01 #b weight for the L2 Rel2 (ND-R vs ND-U)
#the values used below are the +/- 3SD they produce continuous variables which later need to be transformed to categorical ones; admittedly this introduces a great deal of error/noise into the simulation
#the article didn't include a correlation matrix or M/SDs so this was a clunky process
( Session = runif(n_client*n_session, -3.61, 3.18)) #calc L1 Session, values are the +/3 3SD
( SexualIdentity = runif(n_client*Session, -6.66, 6.92)) #calc L2 Sexual Identity, values are the +/3 3SD
( Religion1 = runif(n_client*Session, -3.43, 3.37)) #calc L2 Religion1, values are the +/3 3SD
( Religion2 = rep (runif(n_session, -3.38, 3.41), each = n_session)) #calc L2 Religion2, values are the +/3 3SD
mu = 1.76 #intercept of empty model
sds = 2.264 #this is the SD of the DV
sd = 1 #this is the observation-level random effect variance that we set at 1
#( church = rep(LETTERS[1:n_church], each = n_mbrs) ) #this worked in the prior
( client = rep(LETTERS[1:n_client], each = n_session) )
#( session = numbers[1:(n_client*n_session)] )
( clienteff = rnorm(n_client, 0, sds) )
( clienteff = rep(clienteff, each = n_session) )
( sessioneff = rnorm(n_client*n_session, 0, sd) )
( Anxiety = b0 + b1*Session + b2*SexualIdentity + b3*Religion1 + b4*Religion2 + clienteff + sessioneff)
( dat = data.frame(client, clienteff, sessioneff, Session, SexualIdentity, Religion1, Religion2, Anxiety) )
dat <- dat %>% dplyr::mutate(ID = row_number())
#moving the ID number to the first column; requires
dat <- dat%>% dplyr::select(ID, everything())
Lefevor2017 <- dat%>%
select(ID, client, Session, SexualIdentity, Religion1, Religion2, Anxiety)
Lefevor2017$ClientID <- rep(c(1:12825), each = 5)
#rounded Sexual Identity into dichotomous variable
#85% were heterosexual,
#The following variables should be L2, but were simulated as if they were L1
Lefevor2017$Rel1 <- as.numeric(robumeta::group.mean(Lefevor2017$Religion1,Lefevor2017$ClientID))#aggregated at group mean
Lefevor2017$Rel2 <- as.numeric(robumeta::group.mean(Lefevor2017$Religion2,Lefevor2017$ClientID))#aggregated at group mean
Lefevor2017$SxID <- as.numeric(robumeta::group.mean(Lefevor2017$SexualIdentity,Lefevor2017$ClientID))#aggregated at group mean
#Rel2 has contrast codes for dominant religion (DR, 0), nondominant religious (NDR, 1) and nondominant unspecified (NDU, -1)
#Strategy is to figure out the raw score associated with the percentile rank of  -1 and 0, to set the breakpoints for the coding
#NDU coded as -1
#19.2+13.5+9.6
#NDU has bottom 42.3 percent
#DR coded as 0, so quantile cut will be 42.3 + 52.7 = 95th
#33.4 + 19.3
#52.7% of sample (according to article) was DR
#must look up percentile ranks for 5% and 57.5%
#NDR
#2.3+1+1+.7
#NDR has 5% of sample
#42.3+52.7
#quantile(Lefevor2017$Religion2, probs = c(.423, .95))
#effects coding the second Religion variable so that NDU = -1, DR = 0, NDR = 1
Lefevor2017$Rel2L2 <- ifelse(Lefevor2017$Religion2 <= -3.0877087, -1,
ifelse(Lefevor2017$Religion2 >= -3.0877087 & Lefevor2017$Religion2 <= 0.9299491, 0,1))
#checking work
#Rel2L2_table <- table(Lefevor2017$Rel2L2)
#prop.table(Rel2L2_table)
#Lefevor2017 %>%
#count(Rel2L2)
#creating the first religion variable where DR is 2 and NDR and NDU are both -1
Lefevor2017$Rel1L2 <- plyr::mapvalues(Lefevor2017$Rel2L2, from = c(-1, 0, 1), to = c(-1, 2, -1))
Lefevor2017$DRel0 <- plyr::mapvalues(Lefevor2017$Rel2L2, from = c(-1, 0, 1), to = c(1, 0, 1))
#checking to make sure that 52.7% are coded 2 (DR)
#Rel1L2_table <- table(Lefevor2017$Rel1L2)
#prop.table(Rel1L2_table)
#heterosexual is -1
#LGBTQIA+ is 1
#quantile(Lefevor2017$SxID, probs = c(.85))
Lefevor2017$SexID <- ifelse(Lefevor2017$SxID <= 1.203468, -1,1)
Lefevor2017$Het0 <- plyr::mapvalues(Lefevor2017$SexID, from = c(-1,1), to = c(0,1))
#SexID_table <- table(Lefevor2017$SexID)
#prop.table(SexID_table)
#creating a variable representing the session number for each client, in the article up to 20 sessions were allowed.
#install.packages("scales")
#Right from the beginning I centered this so that 0 would represent intake
#Lefevor2017$Session0 <- as.integer(scales::rescale(Lefevor2017$Session, to = c(0, 19)))
Lefevor2017$SessionT <- scales::rescale(Lefevor2017$Session, to = c(0, 19))
#creating session waves (1 thru 5) by rank ordering within each person's variable the continuous variable Session that was created in the original simulation
LefevorTIME <- Lefevor2017%>%
dplyr::group_by(ClientID) %>%
dplyr::mutate(Index = rank(Session))
#selecting the simulated variables
LefevorTIME_sim <- LefevorTIME%>%
dplyr::select(ClientID, Index, SessionT, Anxiety, DRel0, Het0)
#rearranging variables so that IDs are together
LefevorTIME_sim <- LefevorTIME_sim%>%
dplyr::select(ClientID, Index, SessionT, Anxiety, DRel0, Het0)
#resorting data so that each person is together
LefevorTIME_sim <- dplyr::arrange(LefevorTIME_sim, ClientID, Index)
#In the transition from long-to-wide, it seems like you can only do one L1 variable at a time
#When there are multiple L1 and L2 vars, put all L2 vars on left of tilde
#The wave/index function should come next; this should be finite (like integers of 1,2,3,4) with a maximum
#Put the name of the SINGLE L1 variable in the concatonated list
library(data.table)
LfvrTWp1<-reshape2::dcast(LefevorTIME_sim, ClientID + DRel0 + Het0 ~ Index, value.var = c("Index"))
#rename the anxiety variable
LfvrTWp1<-  rename(LfvrTWp1, Index1 = "1", Index2 = "2", Index3 = "3", Index4 = "4", Index5 = "5")
LfvrTWp2<-reshape2::dcast(LefevorTIME_sim, ClientID ~ Index, value.var = c("Anxiety"))
#rename the anxiety variable
LfvrTWp2<-  rename(LfvrTWp2, Anx1 = "1", Anx2 = "2", Anx3 = "3", Anx4 = "4", Anx5 = "5")
#For remaining L1 variable, do them one at a time -- key them from the person-level ID and the wave/index.
LfvrTWp3<-reshape2::dcast(LefevorTIME_sim, ClientID ~ Index, value.var = c("SessionT"))
LfvrTWp3<-  dplyr::rename(LfvrTWp3, Sess1 = "1", Sess2 = "2", Sess3 = "3", Sess4 = "4", Sess5 = "5")
#Next, join the dataframes by the person-level ID
#Only two can be joined at a time
LfvrTWide <- dplyr::full_join(LfvrTWp1, LfvrTWp2, by = c("ClientID"))
LfvrTWide <- dplyr::full_join(LfvrTWide, LfvrTWp3,  by = c("ClientID"))
TIMEwide <- read.csv ("LefevorTWide.csv", head = TRUE, sep = ",")
head(TIMEwide)
TIMEwide$Intake <- lubridate::ymd("2021-05-28")
str(TIMEwide$Intake)
TIMEwide <- TIMEwide%>%
dplyr::mutate (Weeks1 = Intake + lubridate::dweeks(Sess1))%>%
dplyr::mutate (Weeks2 = Intake + lubridate::dweeks(Sess2))%>%
dplyr::mutate (Weeks3 = Intake + lubridate::dweeks(Sess3))%>%
dplyr::mutate (Weeks4 = Intake + lubridate::dweeks(Sess4))%>%
dplyr::mutate (Weeks5 = Intake + lubridate::dweeks(Sess5))
head(TIMEwide)
str(TIMEwide$Weeks1)
library(lubridate) #neeeded to use the %--% command
TIMEwide <- TIMEwide %>%
dplyr::mutate(TimeInterval1 = Weeks1 %--% Weeks1)%>%
dplyr::mutate(TimeInterval2 = Weeks1 %--% Weeks2)%>%
dplyr::mutate(TimeInterval3 = Weeks1 %--% Weeks3)%>%
dplyr::mutate(TimeInterval4 = Weeks1 %--% Weeks4)%>%
dplyr::mutate(TimeInterval5 = Weeks1 %--% Weeks5)
head(TIMEwide)
TIMEwide <- TIMEwide %>%
dplyr::mutate(Wks1 = as.duration(TimeInterval1)/dweeks(x=1))%>%
dplyr::mutate(Wks2 = as.duration(TimeInterval2)/dweeks(x=1))%>%
dplyr::mutate(Wks3 = as.duration(TimeInterval3)/dweeks(x=1))%>%
dplyr::mutate(Wks4 = as.duration(TimeInterval4)/dweeks(x=1))%>%
dplyr::mutate(Wks5 = as.duration(TimeInterval5)/dweeks(x=1))
head(TIMEwide)
str(TIMEwide$Wks1)
psych::describe(TIMEwide[c("Wks1", "Wks2", "Wks3", "Wks4", "Wks5")])
library(data.table)
TIMElong <- (data.table::melt(setDT(TIMEwide), id.vars = c("ClientID", "DRel0", "Het0"), measure.vars =list(c("Anx1", "Anx2", "Anx3", "Anx4", "Anx5"),  c("Wks1", "Wks2", "Wks3", "Wks4", "Wks5") )))
#This process  does not preserve the variable names, so we need to rename them
TIMElong<- rename(TIMElong<-  rename(TIMElong, Index = variable, Anxiety = "value1", Weeks = "value2"))
#rearanging variables so that IDs are together
TIMElong <- TIMElong%>%
select(ClientID, Index, Weeks, Anxiety, DRel0, Het0)
#resorting data so that each person is together
TIMElong <- arrange(TIMElong, ClientID, Index)
head(TIMElong)
str(TIMElong)
set.seed(210529)
TIMElong <- TIMElong[-sample(1:nrow(TIMElong), 5000),]
rndm30time <- subset(TIMElong, ClientID %in% sample(unique(TIMElong$ClientID), 30))
ggplot(data = rndm30time, aes(x = Weeks, y = Anxiety)) + geom_point() + geom_line() +
facet_wrap(~ClientID)
ggplot(data = rndm30time, aes(x = Weeks, y = Anxiety)) + geom_point() +
stat_smooth(method = "lm", se = FALSE) + facet_wrap(~ClientID)
M1a <- lme4::lmer(Anxiety ~1 +(1 | ClientID), TIMElong, REML = FALSE)
summary(M1a)
sjPlot::tab_model(M1a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
sjPlot::plot_model (M1a, type="diag")
#If the code below does not run, install the package glmmTMB from its source with the following coe
install.packages("glmmTMB", type="source")
install.packages("glmmTMB", type = "source")
#If the code below does not run, install the package glmmTMB from its source with the following coe
install.packages("glmmTMB", type="source")
#If the code below does not run, install the package glmmTMB from its source with the following code
#Remove the hashtag to install, then replace it to avoide re-re-installing the package
#install.packages("glmmTMB", type="source")
sjPlot::plot_model (M1a, type="diag")
#with lme4 package
M2a <- lme4::lmer(Anxiety ~ Weeks +(Weeks | ClientID), TIMElong, REML = FALSE)
summary(M2a )
sjPlot::tab_model(M1a, M2a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1", "Mod2"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
sjPlot::plot_model (M2a, type="pred", terms=c("Weeks"))
(1.45 - 1.26)/1.45
#with lme4 package
M3a <- lme4::lmer(Anxiety ~ Weeks*Het0 +(Weeks | ClientID), TIMElong, REML = FALSE)
summary(M3a)
sjPlot::tab_model(M1a, M2a,M3a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1", "Mod2", "Mod3"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
sjPlot::plot_model (M3a, type="int", terms = c("Weeks", "Het0 [0,1]"))
2.49 + .28
(5.18-5.16)/5.18
#with lme4 package
M4a <- lme4::lmer(Anxiety ~ Weeks*Het0 + Weeks*DRel0 + Het0*DRel0 + (Weeks | ClientID), TIMElong, REML = FALSE, control = lme4::lmerControl(optimizer= "bobyqa"))
summary(M4a)
sjPlot::tab_model(M1a, M2a, M3a, M4a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1", "Mod2", "Mod3", "Mod4"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
#with lme4 package
M5a <- lme4::lmer(Anxiety ~ Weeks + Het0 + (Weeks | ClientID), TIMElong, REML = FALSE, control = lme4::lmerControl(optimizer= "bobyqa"))
summary(M5a)
sjPlot::tab_model(M1a, M2a, M3a, M4a, M5a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1", "Mod2", "Mod3", "Mod4", "Mod5"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
sjPlot::plot_model (M5a, type="diag")
sjPlot::plot_model (M5a, type="pred",terms=c("Weeks", "Het0"))
2.49 + .29
library(dplyr)
TIMElong <- TIMElong %>%
mutate(
Index = as.numeric(Index)
)
as.numeric(as.character(TIMElong$Index))
str(TIMElong$Index)
ggplot(data = rndm30time, aes(x = Index, y = Anxiety)) + geom_point() + geom_line() +
facet_wrap(~ClientID)
library(ggplot2)
ggplot(data = rndm30time, aes(x = Index, y = Anxiety)) + geom_point() + geom_line() +
facet_wrap(~ClientID)
ggplot(data = rndm30time, aes(x = Index, y = Anxiety)) + geom_point() +
stat_smooth(method = "lm", se = FALSE) + facet_wrap(~ClientID)
#with lme4 package
M1i <- lme4::lmer(Anxiety ~1 +(1 | ClientID), TIMElong, REML = FALSE)
M2i <- lme4::lmer(Anxiety ~ Index + (Index | ClientID), TIMElong, REML = FALSE, control=lme4::lmerControl(check.nobs.vs.nRE="ignore"))
M3i <- lme4::lmer(Anxiety ~ Index*Het0 +(Index | ClientID), TIMElong, REML = FALSE, control = lme4::lmerControl(optimizer= "bobyqa"))
M4i <- lme4::lmer(Anxiety ~ Index*Het0 + Index*DRel0 + Het0*DRel0 + (Index | ClientID), TIMElong, REML = FALSE, control = lme4::lmerControl(optimizer= "bobyqa"))
M5i <- lme4::lmer(Anxiety ~ Index + Het0 + (Index | ClientID), TIMElong, REML = FALSE, control = lme4::lmerControl(optimizer= "bobyqa"))
summary(M5a)
sjPlot::tab_model(M1i, M2i, M3i, M4i, M5i, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1i", "Mod2i", "Mod3i", "Mod4i", "Mod5i"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
sjPlot::plot_model (M5i, type="pred",terms=c("Index", "Het0"))
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(lavaan)){install.packages("lavaan")}
#if(!require(semPlot)){install.packages("semPlot")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(psych)){install.packages("psych")}
#if(!require(jtools)){install.packages("jtools")}
#Entering the intercorrelations, means, and standard deviations from the journal article
Kim_generating_model <- '
#measurement model
REMS =~ .82*Inf32 + .75*Inf38 + .74*Inf21 + .72*Inf17 + .69*Inf9 + .61*Inf36 + .51*Inf5 + .49*Inf22 + .81*SClass6 + .81*SClass31 + .74*SClass8 + .74*SClass40 + .72*SClass2 + .65*SClass34 + .55*SClass11 + .84*mInv27 + .84*mInv30 + .80*mInv39 + .72*mInv7 + .62*mInv26 + .61*mInv33 + .53*mInv4 + .47*mInv14 + .47*mInv10 + .74*Exot3 + .74*Exot29 + .71*Exot45 + .69*Exot35 + .60*Exot42 + .59*Exot23 + .51*Exot13 + .51*Exot20 + .49*Exot43 + .84*mEnv37 + .85*mEnv24 + .78*mEnv19 + .70*mEnv28 + .69*mEnv18 + .55*mEnv41 + .55*mEnv12 + .76*mWork25 + .67*mWork15 + .65*mWork1 + .64*mWork16 + .62*mWork44
CMI =~ .8*cmi1 + .8*cmi2 + .8*cmi3 + .8*cmi4 + .8*cmi5 + .8*cmi6 + .8*cmi7 + .8*cmi8 + .8*cmi9 + .8*cmi10 + .8*cmi11 + .8*cmi12 + .8*cmi13 + .8*cmi14 + .8*cmi15 + .8*cmi16 + .8*cmi17 + .8*cmi18 + .8*cmi19 + .8*cmi20 + .8*cmi21 + .8*cmi22 + .8*cmi23 + .8*cmi24 + .8*cmi25 + .8*cmi26 + .8*cmi27 + .8*cmi28 + .8*cmi29 + .8*cmi30 + .8*cmi31 + .8*cmi32 + .8*cmi33 + .8*cmi34 + .8*cmi35 + .8*cmi36 + .8*cmi37 + .8*cmi38 + .8*cmi39 + .8*cmi40 + .8*cmi41 + .8*cmi42 + .8*cmi43 + .8*cmi44 + .8*cmi45 + .8*cmi46 + .8*cmi47
ANX =~ .80*Anx1 + .80*Anx2 + .77*Anx3 + .74*Anx4 + .74*Anx5 + .69*Anx6 + .69*Anx7 + .68*Anx8 + .50*Anx9
DEP =~ .74*Dep1 + .83*Dep2 + .82*Dep3 + .74*Dep4
PWB =~ .83*pwb1 + .72*pwb2 + .67*pwb3 + .79*pwb4 + .77*pwb5 + .75*pwb6 + .74*pwb7 +.71*pwb8 +.67*pwb9 +.61*pwb10 +.58*pwb11
HlpSkg =~ .8*hlpskg1 + .8*hlpskg2 + .8*hlpskg3 + .8*hlpskg4 + .8*hlpskg5 + .8*hlpskg6 + .8*hlpskg7 + .8*hlpskg8 + .8*hlpskg9 + .8*hlpskg10
#Means
REMS ~ 0.34*1
CMI ~ 3*1
ANX ~ 2.98*1
DEP ~ 2.36*1
PWB ~ 3.5*1
HlpSkg ~ 1.64*1
#Correlations
REMS ~ 0.58*CMI
REMS ~ 0.26*ANX
REMS ~ 0.34*DEP
REMS ~ -0.25*PWB
REMS ~ -0.02*HlpSkg
CMI ~ 0.12*ANX
CMI ~ 0.19*DEP
CMI ~ -0.28*PWB
CMI ~ 0*HlpSkg
ANX ~ 0.66*DEP
ANX ~ -0.55*PWB
ANX ~ 0.07*HlpSkg
DEP ~ -0.66*PWB
DEP ~ 0.05*HlpSkg
PWB ~ 0.08*HlpSkg
'
set.seed(230916)
dfKim <- lavaan::simulateData(model = Kim_generating_model,
model.type = "sem",
meanstructure = T,
sample.nobs=156,
standardized=FALSE)
library(tidyverse)
#used to retrieve column indices used in the rescaling script below
col_index <- as.data.frame(colnames(dfKim))
for(i in 1:ncol(dfKim)){
if(i >= 1 & i <= 45){
dfKim[,i] <- scales::rescale(dfKim[,i], c(0, 1))
}
if(i >= 46 & i <= 116){
dfKim[,i] <- scales::rescale(dfKim[,i], c(1, 7))
}
if(i >= 93 & i <= 116){
dfKim[,i] <- scales::rescale(dfKim[,i], c(1, 5))
}
if(i >= 117 & i <= 126){
dfKim[,i] <- scales::rescale(dfKim[,i], c(0, 3))
}
}
#psych::describe(dfKim)+
library(tidyverse)
dfKim <- dfKim %>% round(0)
#I tested the rescaling the correlation between original and rescaled variables is 1.0
#Kim_df_latent$INF32 <- scales::rescale(Kim_df_latent$Inf32, c(0, 1))
#cor.test(Kim_df_latent$Inf32, Kim_df_latent$INF32, method="pearson")
#Checking our work against the original correlation matrix
#round(cor(Kim_df),3)
Kim_generating_model <- '
#measurement model
REMS =~ .82*Inf32 + .75*Inf38 + .74*Inf21 + .72*Inf17 + .69*Inf9 + .61*Inf36 + .51*Inf5 + .49*Inf22 + .81*SClass6 + .81*SClass31 + .74*SClass8 + .74*SClass40 + .72*SClass2 + .65*SClass34 + .55*SClass11 + .84*mInv27 + .84*mInv30 + .80*mInv39 + .72*mInv7 + .62*mInv26 + .61*mInv33 + .53*mInv4 + .47*mInv14 + .47*mInv10 + .74*Exot3 + .74*Exot29 + .71*Exot45 + .69*Exot35 + .60*Exot42 + .59*Exot23 + .51*Exot13 + .51*Exot20 + .49*Exot43 + .84*mEnv37 + .85*mEnv24 + .78*mEnv19 + .70*mEnv28 + .69*mEnv18 + .55*mEnv41 + .55*mEnv12 + .76*mWork25 + .67*mWork15 + .65*mWork1 + .64*mWork16 + .62*mWork44
CMI =~ .8*cmi1 + .8*cmi2 + .8*cmi3 + .8*cmi4 + .8*cmi5 + .8*cmi6 + .8*cmi7 + .8*cmi8 + .8*cmi9 + .8*cmi10 + .8*cmi11 + .8*cmi12 + .8*cmi13 + .8*cmi14 + .8*cmi15 + .8*cmi16 + .8*cmi17 + .8*cmi18 + .8*cmi19 + .8*cmi20 + .8*cmi21 + .8*cmi22 + .8*cmi23 + .8*cmi24 + .8*cmi25 + .8*cmi26 + .8*cmi27 + .8*cmi28 + .8*cmi29 + .8*cmi30 + .8*cmi31 + .8*cmi32 + .8*cmi33 + .8*cmi34 + .8*cmi35 + .8*cmi36 + .8*cmi37 + .8*cmi38 + .8*cmi39 + .8*cmi40 + .8*cmi41 + .8*cmi42 + .8*cmi43 + .8*cmi44 + .8*cmi45 + .8*cmi46 + .8*cmi47
ANX =~ .80*Anx1 + .80*Anx2 + .77*Anx3 + .74*Anx4 + .74*Anx5 + .69*Anx6 + .69*Anx7 + .68*Anx8 + .50*Anx9
DEP =~ .74*Dep1 + .83*Dep2 + .82*Dep3 + .74*Dep4
PWB =~ .83*pwb1 + .72*pwb2 + .67*pwb3 + .79*pwb4 + .77*pwb5 + .75*pwb6 + .74*pwb7 +.71*pwb8 +.67*pwb9 +.61*pwb10 +.58*pwb11
HlpSkg =~ .8*hlpskg1 + .8*hlpskg2 + .8*hlpskg3 + .8*hlpskg4 + .8*hlpskg5 + .8*hlpskg6 + .8*hlpskg7 + .8*hlpskg8 + .8*hlpskg9 + .8*hlpskg10
#Means
REMS ~ 0.34*1
CMI ~ 3*1
ANX ~ 2.98*1
DEP ~ 2.36*1
PWB ~ 3.5*1
HlpSkg ~ 1.64*1
#Correlations
REMS ~ 0.58*CMI
REMS ~ 0.26*ANX
REMS ~ 0.34*DEP
REMS ~ -0.25*PWB
REMS ~ -0.02*HlpSkg
CMI ~ 0.12*ANX
CMI ~ 0.19*DEP
CMI ~ -0.28*PWB
CMI ~ 0*HlpSkg
ANX ~ 0.66*DEP
ANX ~ -0.55*PWB
ANX ~ 0.07*HlpSkg
DEP ~ -0.66*PWB
DEP ~ 0.05*HlpSkg
PWB ~ 0.08*HlpSkg
'
set.seed(230916)
dfKim <- lavaan::simulateData(model = Kim_generating_model,
model.type = "sem",
meanstructure = T,
sample.nobs=156,
standardized=FALSE)
library(tidyverse)
View(dfKim)
#used to retrieve column indices used in the rescaling script below
col_index <- as.data.frame(colnames(dfKim))
View(col_index)
#Entering the intercorrelations, means, and standard deviations from the journal article
Kim_generating_model <- '
#measurement model
REMS =~ .82*Inf32 + .75*Inf38 + .74*Inf21 + .72*Inf17 + .69*Inf9 + .61*Inf36 + .51*Inf5 + .49*Inf22 + .81*SClass6 + .81*SClass31 + .74*SClass8 + .74*SClass40 + .72*SClass2 + .65*SClass34 + .55*SClass11 + .84*mInv27 + .84*mInv30 + .80*mInv39 + .72*mInv7 + .62*mInv26 + .61*mInv33 + .53*mInv4 + .47*mInv14 + .47*mInv10 + .74*Exot3 + .74*Exot29 + .71*Exot45 + .69*Exot35 + .60*Exot42 + .59*Exot23 + .51*Exot13 + .51*Exot20 + .49*Exot43 + .84*mEnv37 + .85*mEnv24 + .78*mEnv19 + .70*mEnv28 + .69*mEnv18 + .55*mEnv41 + .55*mEnv12 + .76*mWork25 + .67*mWork15 + .65*mWork1 + .64*mWork16 + .62*mWork44
CMI =~ .8*cmi1 + .8*cmi2 + .8*cmi3 + .8*cmi4 + .8*cmi5 + .8*cmi6 + .8*cmi7 + .8*cmi8 + .8*cmi9 + .8*cmi10 + .8*cmi11 + .8*cmi12 + .8*cmi13 + .8*cmi14 + .8*cmi15 + .8*cmi16 + .8*cmi17 + .8*cmi18 + .8*cmi19 + .8*cmi20 + .8*cmi21 + .8*cmi22 + .8*cmi23 + .8*cmi24 + .8*cmi25 + .8*cmi26 + .8*cmi27 + .8*cmi28 + .8*cmi29 + .8*cmi30 + .8*cmi31 + .8*cmi32 + .8*cmi33 + .8*cmi34 + .8*cmi35 + .8*cmi36 + .8*cmi37 + .8*cmi38 + .8*cmi39 + .8*cmi40 + .8*cmi41 + .8*cmi42 + .8*cmi43 + .8*cmi44 + .8*cmi45 + .8*cmi46 + .8*cmi47
ANX =~ .80*Anx1 + .80*Anx2 + .77*Anx3 + .74*Anx4 + .74*Anx5 + .69*Anx6 + .69*Anx7 + .68*Anx8 + .50*Anx9
DEP =~ .74*Dep1 + .83*Dep2 + .82*Dep3 + .74*Dep4
PWB =~ .83*pwb1 + .72*pwb2 + .67*pwb3 + .79*pwb4 + .77*pwb5 + .75*pwb6 + .74*pwb7 +.71*pwb8 +.67*pwb9 +.61*pwb10 +.58*pwb11
HlpSkg =~ .8*hlpskg1 + .8*hlpskg2 + .8*hlpskg3 + .8*hlpskg4 + .8*hlpskg5 + .8*hlpskg6 + .8*hlpskg7 + .8*hlpskg8 + .8*hlpskg9 + .8*hlpskg10
#Means
REMS ~ 0.34*1
CMI ~ 3*1
ANX ~ 2.98*1
DEP ~ 2.36*1
PWB ~ 3.5*1
HlpSkg ~ 1.64*1
#Correlations
REMS ~ 0.58*CMI
REMS ~ 0.26*ANX
REMS ~ 0.34*DEP
REMS ~ -0.25*PWB
REMS ~ -0.02*HlpSkg
CMI ~ 0.12*ANX
CMI ~ 0.19*DEP
CMI ~ -0.28*PWB
CMI ~ 0*HlpSkg
ANX ~ 0.66*DEP
ANX ~ -0.55*PWB
ANX ~ 0.07*HlpSkg
DEP ~ -0.66*PWB
DEP ~ 0.05*HlpSkg
PWB ~ 0.08*HlpSkg
'
set.seed(230916)
dfKim <- lavaan::simulateData(model = Kim_generating_model,
model.type = "sem",
meanstructure = T,
sample.nobs=156,
standardized=FALSE)
library(tidyverse)
#used to retrieve column indices used in the rescaling script below
col_index <- as.data.frame(colnames(dfKim))
#for loop to go through each column of the dataframe
#1 thru 45 apply only to REMS variables
#46 thru 92 apply only to CMI variables
#93 thru 116 apply only to mental health variables
#117 thru 126 apply only to HlpSkng variables
for(i in 1:ncol(dfKim)){
if(i >= 1 & i <= 45){
dfKim[,i] <- scales::rescale(dfKim[,i], c(0, 1))
}
if(i >= 46 & i <= 92){
dfKim[,i] <- scales::rescale(dfKim[,i], c(1, 7))
}
if(i >= 93 & i <= 116){
dfKim[,i] <- scales::rescale(dfKim[,i], c(1, 5))
}
if(i >= 117 & i <= 126){
dfKim[,i] <- scales::rescale(dfKim[,i], c(0, 3))
}
}
library(tidyverse)
dfKim <- dfKim %>% round(0)
View(col_index)
View(dfKim)
