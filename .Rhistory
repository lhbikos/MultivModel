EdTrain_vars <- c('cmi13', 'cmi14', 'cmi15', 'cmi16', 'cmi17', 'cmi18', 'cmi19', 'cmi20', 'cmi21', 'cmi22', 'cmi23', 'cmi24')
BusWrk_vars <-c('cmi25', 'cmi26', 'cmi27', 'cmi28', 'cmi29', 'cmi30', 'cmi31', 'cmi32', 'cmi33', 'cmi34', 'cmi35', 'cmi36')
PolLaw_vars <-c('cmi37', 'cmi38', 'cmi39', 'cmi40', 'cmi41', 'cmi42', 'cmi43', 'cmi44', 'cmi45', 'cmi46', 'cmi47')
dfKim$IntRel <- sjstats::mean_n(dfKim[, IntRel_vars], .80)
dfKim$EdTrain <- sjstats::mean_n(dfKim[, EdTrain_vars], .80)
dfKim$BusWrk <- sjstats::mean_n(dfKim[, BusWrk_vars], .80)
dfKim$PolLaw <- sjstats::mean_n(dfKim[, PolLaw_vars], .80)
#If the scoring code above does not work for you, try the format below which involves inserting to periods in front of the variable list. One example is provided.
#dfKim$PolLaw <- sjstats::mean_n(dfKim[, ..PolLaw_vars], .80)
set.seed(230916)
items <- c('pwb1', 'pwb2', 'pwb3', 'pwb4', 'pwb5', 'pwb6', 'pwb7', 'pwb8', 'pwb9', 'pwb10', 'pwb11')
parcels <- c("PWB_p1", "PWB_p_2","PWB_p3")
data.frame(items = sample(items),
parcel = rep(parcels, length = length(items)))
PWB_p1_vars <- c('pwb7','pwb11', 'pwb4', 'pwb8')
PWB_p2_vars <- c('pwb9','pwb2', 'pwb10', 'pwb2')
PWB_p3_vars <- c('pwb1','pwb3', 'pwb5')
dfKim$p1PWB <- sjstats::mean_n(dfKim[, PWB_p1_vars], .75)
dfKim$p2PWB <- sjstats::mean_n(dfKim[, PWB_p2_vars], .75)
dfKim$p3PWB <- sjstats::mean_n(dfKim[, PWB_p3_vars], .75)
#If the scoring code above does not work for you, try the format below which involves inserting to periods in front of the variable list. One example is provided.
#dfKim$p3PWB <- sjstats::mean_n(dfKim[, ..PWB_p3_vars], .75)
REMS_p1_vars <- c('mWork44','Exot20', 'SClass8', 'Exot43', 'mInv4', 'SClass31', 'SClass40', 'mWork16', 'Exot45', 'SClass2', 'Exot3', 'mEnv24', 'Exot35', 'mInv7', 'Exot13')
REMS_p2_vars <- c('mEnv41','SClass11', 'Inf5', 'mEnv19', 'mInv39', 'Inf22', 'mEnv18', 'mInv30', 'Inf32', 'SClass34', 'Exot29', 'mInv27', 'mInv10', 'mWork1', 'mWork15')
REMS_p3_vars <- c('mWork25','Inf38', 'Inf17', 'Exot23', 'mInv33',  'mEnv28', 'Inf36', 'mInv14', 'mEnv37', 'Inf21', 'mEnv12', 'Exot42', 'SClass6', 'Inf9', 'mInv26')
dfKim$p1REMS <- sjstats::mean_n(dfKim[, REMS_p1_vars], .80)
dfKim$p2REMS <- sjstats::mean_n(dfKim[, REMS_p2_vars], .80)
dfKim$p3REMS <- sjstats::mean_n(dfKim[, REMS_p3_vars], .80)
#If the scoring code above does not work for you, try the format below which involves inserting to periods in front of the variable list. One example is provided.
#dfKim$p3REMS <- sjstats::mean_n(dfKim[, ..REMS_p3_vars], .80)
CMI_p1_vars <- c('cmi45', 'cmi32', 'cmi11',	'cmi33', 'cmi22', 'cmi12', 'cmi26', 'cmi25', 'cmi44', 'cmi13', 'cmi31', 'cmi34', 'cmi37', 'cmi43', 'cmi24', 'cmi9')
CMI_p2_vars <- c('cmi39', 'cmi15', 'cmi7', 'cmi38', 'cmi18', 'cmi40', 'cmi47', 'cmi27', 'cmi1', 'cmi14', 'cmi42', 'cmi8', 'cmi19', 'cmi20', 'cmi5', 'cmi16')
CMI_p3_vars <- c('cmi41', 'cmi2', 'cmi4', 'cmi30', 'cmi46', 'cmi6', 'cmi17', 'cmi23', 'cmi10', 'cmi3', 'cmi29', 'cmi28', 'cmi21', 'cmi35', 'cmi36')
dfKim$p1CMI <- sjstats::mean_n(dfKim[, CMI_p1_vars], .80)
dfKim$p2CMI <- sjstats::mean_n(dfKim[, CMI_p2_vars], .80)
dfKim$p3CMI <- sjstats::mean_n(dfKim[, CMI_p3_vars], .80)
#If the scoring code above does not work for you, try the format below which involves inserting to periods in front of the variable list. One example is provided.
#dfKim$p3CMI <- sjstats::mean_n(dfKim[, ..CMI_p3_vars], .80)
#global fit indices
rp3_msmt_fitstats <- tidySEM::table_fit(rp3_msmt_fit)
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(lavaan)){install.packages("lavaan")}
#if(!require(semPlot)){install.packages("semPlot")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(psych)){install.packages("psych")}
#if(!require(jtools)){install.packages("jtools")}
#Entering the intercorrelations, means, and standard deviations from the journal article
Kim_generating_model <- "
##measurement model
REMS =~ .82*Inf32 + .75*Inf38 + .74*Inf21 + .72*Inf17 + .69*Inf9 + .61*Inf36 + .51*Inf5 + .49*Inf22 + .81*SClass6 + .81*SClass31 + .74*SClass8 + .74*SClass40 + .72*SClass2 + .65*SClass34 + .55*SClass11 + .84*mInv27 + .84*mInv30 + .80*mInv39 + .72*mInv7 + .62*mInv26 + .61*mInv33 + .53*mInv4 + .47*mInv14 + .47*mInv10 + .74*Exot3 + .74*Exot29 + .71*Exot45 + .69*Exot35 + .60*Exot42 + .59*Exot23 + .51*Exot13 + .51*Exot20 + .49*Exot43 + .84*mEnv37 + .85*mEnv24 + .78*mEnv19 + .70*mEnv28 + .69*mEnv18 + .55*mEnv41 + .55*mEnv12 + .76*mWork25 + .67*mWork15 + .65*mWork1 + .64*mWork16 + .62*mWork44
CMI =~ .8*cmi1 + .8*cmi2 + .8*cmi3 + .8*cmi4 + .8*cmi5 + .8*cmi6 + .8*cmi7 + .8*cmi8 + .8*cmi9 + .8*cmi10 + .8*cmi11 + .8*cmi12 + .8*cmi13 + .8*cmi14 + .8*cmi15 + .8*cmi16 + .8*cmi17 + .8*cmi18 + .8*cmi19 + .8*cmi20 + .8*cmi21 + .8*cmi22 + .8*cmi23 + .8*cmi24 + .8*cmi25 + .8*cmi26 + .8*cmi27 + .8*cmi28 + .8*cmi29 + .8*cmi30 + .8*cmi31 + .8*cmi32 + .8*cmi33 + .8*cmi34 + .8*cmi35 + .8*cmi36 + .8*cmi37 + .8*cmi38 + .8*cmi39 + .8*cmi40 + .8*cmi41 + .8*cmi42 + .8*cmi43 + .8*cmi44 + .8*cmi45 + .8*cmi46 + .8*cmi47
ANX =~ .80*Anx1 + .80*Anx2 + .77*Anx3 + .74*Anx4 + .74*Anx5 + .69*Anx6 + .69*Anx7 + .68*Anx8 + .50*Anx9
DEP =~ .74*Dep1 + .83*Dep2 + .82*Dep3 + .74*Dep4
PWB =~ .83*pwb1 + .72*pwb2 + .67*pwb3 + .79*pwb4 + .77*pwb5 + .75*pwb6 + .74*pwb7 +.71*pwb8 +.67*pwb9 +.61*pwb10 +.58*pwb11
HlpSkg =~ .8*hlpskg1 + .8*hlpskg2 + .8*hlpskg3 + .8*hlpskg4 + .8*hlpskg5 + .8*hlpskg6 + .8*hlpskg7 + .8*hlpskg8 + .8*hlpskg9 + .8*hlpskg10
# Means
REMS ~ 0.34*1
CMI ~ 3*1
ANX ~ 2.98*1
DEP ~ 2.36*1
PWB ~ 3.5*1
HlpSkg ~ 1.64*1
# Correlations (ha!)
REMS ~ 0.58*CMI
REMS ~ 0.26*ANX
REMS ~ 0.34*DEP
REMS ~ -0.25*PWB
REMS ~ -0.02*HlpSkg
CMI ~ 0.12*ANX
CMI ~ 0.19*DEP
CMI ~ -0.28*PWB
CMI ~ 0*HlpSkg
ANX ~ 0.66*DEP
ANX ~ -0.55*PWB
ANX ~ 0.07*HlpSkg
DEP ~ -0.66*PWB
DEP ~ 0.05*HlpSkg
PWB ~ 0.08*HlpSkg
"
set.seed(230916)
dfKim <- lavaan::simulateData(model = Kim_generating_model,
model.type = "sem",
meanstructure = T,
sample.nobs=156,
standardized=FALSE)
library(tidyverse)
#used to retrieve column indices used in the rescaling script below
col_index <- as.data.frame(colnames(dfKim))
for(i in 1:ncol(dfKim)){  # for loop to go through each column of the dataframe
if(i >= 1 & i <= 45){   # apply only to REMS variables
dfKim[,i] <- scales::rescale(dfKim[,i], c(0, 1))
}
if(i >= 46 & i <= 116){   # apply only to CMI variables
dfKim[,i] <- scales::rescale(dfKim[,i], c(1, 7))
}
if(i >= 93 & i <= 116){   # apply only to mental health variables
dfKim[,i] <- scales::rescale(dfKim[,i], c(1, 5))
}
if(i >= 117 & i <= 126){   # apply only to HlpSkng variables
dfKim[,i] <- scales::rescale(dfKim[,i], c(0, 3))
}
}
#psych::describe(dfKim)+
library(tidyverse)
dfKim <- dfKim %>% round(0)
#I tested the rescaling the correlation between original and rescaled variables is 1.0
#Kim_df_latent$INF32 <- scales::rescale(Kim_df_latent$Inf32, c(0, 1))
#cor.test(Kim_df_latent$Inf32, Kim_df_latent$INF32, method="pearson")
#Checking our work against the original correlation matrix
#round(cor(Kim_df),3)
#saveRDS(dfKim, 'dfKim.rds')
#dfKim<- readRDS('dfKim.rds')
#write.table(dfKim, file = 'dfKim.csv', sep = ',', col.names=TRUE, row.names=FALSE)
# dfKim<- read.csv ('dfKim.csv', header = TRUE)
init_msmt_mod <- "
##measurement model
REMS =~ Inf32 + Inf38 + Inf21 + Inf17 + Inf9 + Inf36 + Inf5 + Inf22 + SClass6 + SClass31 + SClass8 + SClass40 + SClass2 + SClass34 + SClass11 + mInv27 + mInv30 + mInv39 + mInv7 + mInv26 + mInv33 + mInv4 + mInv14 + mInv10 + Exot3 + Exot29 + Exot45 + Exot35 + Exot42 + Exot23 + Exot13 + Exot20 + Exot43 + mEnv37 + mEnv24 + mEnv19 + mEnv28 + mEnv18 + mEnv41 + mEnv12 + mWork25 + mWork15 + mWork1 + mWork16 + mWork44
CMI =~ cmi1 + cmi2 + cmi3 + cmi4 + cmi5 + cmi6 + cmi7 + cmi8 + cmi9 + cmi10 + cmi11 + cmi12 + cmi13 + cmi14 + cmi15 + cmi16 + cmi17 + cmi18 + cmi19 + cmi20 + cmi21 + cmi22 + cmi23 + cmi24 + cmi25 + cmi26 + cmi27 + cmi28 + cmi29 + cmi30 + cmi31 + cmi32 + cmi33 + cmi34 + cmi35 + cmi36 + cmi37 + cmi38 + cmi39 + cmi40 + cmi41 + cmi42 + cmi43 + cmi44 + cmi45 + cmi46 + cmi47
PWB =~ pwb1 + pwb2 + pwb3 + pwb4 + pwb5 + pwb6 + pwb7 + pwb8 + pwb9 + pwb10 + pwb11
# Covariances
REMS ~~ CMI
REMS ~~ PWB
CMI ~~ PWB
"
set.seed(230916)
init_msmt_fit <- lavaan::cfa(init_msmt_mod, data = dfKim)
#you can add missing = "fiml" to the code; I deleted it because it was really slowing down the run
init_msmt_fit_sum <- lavaan::summary(init_msmt_fit, fit.measures = TRUE, standardized = TRUE)
init_msmt_fit_sum
init_msmt_fitstats <- tidySEM::table_fit(init_msmt_fit)
init_msmt_fitstats
init_msmt_pEsts <- tidySEM::table_results(init_msmt_fit, digits=3, columns = NULL)
init_msmt_pEsts
init_msmt_LVcorr <- tidySEM::table_cors(init_msmt_fit, digits=3)
init_msmt_LVcorr
write.csv(init_msmt_fitstats, file = "init_msmt_fitstats.csv")
write.csv(init_msmt_pEsts, file = "init_msmt_pEsts.csv")
write.csv(init_msmt_LVcorr, file = "init_msmt_LVcorr.csv")
semPlot::semPaths(init_msmt_fit, what = "col", whatLabels = "stand", sizeMan = 5, node.width = 1, edge.label.cex = .75, style = "lisrel", mar = c(5,5,5,5))
Inf_vars <- c('Inf32', 'Inf38', 'Inf21', 'Inf17', 'Inf9', 'Inf36', 'Inf5', 'Inf22')
SClass_vars <- c('SClass8', 'SClass40', 'SClass2',  'SClass34',  'SClass11')
mInv_vars <- c('mInv27', 'mInv39', 'mInv7', 'mInv26', 'mInv33', 'mInv4', 'mInv14', 'mInv10')
Exot_vars <- c('Exot3', 'Exot29', 'Exot45', 'Exot35', 'Exot42', 'Exot23', 'Exot13', 'Exot20', 'Exot43')
mEnv_vars <- c('mEnv37', 'mEnv24', 'mEnv19', 'mEnv28', 'mEnv18', 'mEnv41', 'mEnv12')
mWork_vars <- c('mWork25', 'mWork15', 'mWork1', 'mWork16', 'mWork44')
dfKim$Inf_P <- sjstats::mean_n(dfKim[, Inf_vars], .80)
dfKim$SClass_P <- sjstats::mean_n(dfKim[, SClass_vars], .80)
dfKim$mInv_P <- sjstats::mean_n(dfKim[, mInv_vars], .80)
dfKim$Exot_P <- sjstats::mean_n(dfKim[, Exot_vars], .80)
dfKim$mEnv_P <- sjstats::mean_n(dfKim[, mEnv_vars], .80)
dfKim$mWork_P <- sjstats::mean_n(dfKim[, mWork_vars], .80)
#If the scoring code above does not work for you, try the format below which involves inserting to periods in front of the variable list. One example is provided.
#dfKim$mWork_P <- sjstats::mean_n(dfKim[,.. mWork_vars], .80)
IntRel_vars <- c('cmi1', 'cmi2', 'cmi3', 'cmi4', 'cmi5', 'cmi6', 'cmi7', 'cmi8', 'cmi9', 'cmi10', 'cmi11', 'cmi12')
EdTrain_vars <- c('cmi13', 'cmi14', 'cmi15', 'cmi16', 'cmi17', 'cmi18', 'cmi19', 'cmi20', 'cmi21', 'cmi22', 'cmi23', 'cmi24')
BusWrk_vars <-c('cmi25', 'cmi26', 'cmi27', 'cmi28', 'cmi29', 'cmi30', 'cmi31', 'cmi32', 'cmi33', 'cmi34', 'cmi35', 'cmi36')
PolLaw_vars <-c('cmi37', 'cmi38', 'cmi39', 'cmi40', 'cmi41', 'cmi42', 'cmi43', 'cmi44', 'cmi45', 'cmi46', 'cmi47')
dfKim$IntRel <- sjstats::mean_n(dfKim[, IntRel_vars], .80)
dfKim$EdTrain <- sjstats::mean_n(dfKim[, EdTrain_vars], .80)
dfKim$BusWrk <- sjstats::mean_n(dfKim[, BusWrk_vars], .80)
dfKim$PolLaw <- sjstats::mean_n(dfKim[, PolLaw_vars], .80)
#If the scoring code above does not work for you, try the format below which involves inserting to periods in front of the variable list. One example is provided.
#dfKim$PolLaw <- sjstats::mean_n(dfKim[, ..PolLaw_vars], .80)
set.seed(230916)
items <- c('pwb1', 'pwb2', 'pwb3', 'pwb4', 'pwb5', 'pwb6', 'pwb7', 'pwb8', 'pwb9', 'pwb10', 'pwb11')
parcels <- c("PWB_p1", "PWB_p_2","PWB_p3")
data.frame(items = sample(items),
parcel = rep(parcels, length = length(items)))
PWB_p1_vars <- c('pwb7','pwb11', 'pwb4', 'pwb8')
PWB_p2_vars <- c('pwb9','pwb2', 'pwb10', 'pwb2')
PWB_p3_vars <- c('pwb1','pwb3', 'pwb5')
dfKim$p1PWB <- sjstats::mean_n(dfKim[, PWB_p1_vars], .75)
dfKim$p2PWB <- sjstats::mean_n(dfKim[, PWB_p2_vars], .75)
dfKim$p3PWB <- sjstats::mean_n(dfKim[, PWB_p3_vars], .75)
#If the scoring code above does not work for you, try the format below which involves inserting to periods in front of the variable list. One example is provided.
#dfKim$p3PWB <- sjstats::mean_n(dfKim[, ..PWB_p3_vars], .75)
subsc_msmt_mod <- "
##measurement model
REMS =~ Inf_P + SClass_P + mInv_P + Exot_P + mEnv_P + mWork_P
CMI =~ IntRel + EdTrain + BusWrk + PolLaw
PWB =~ p1PWB + p2PWB + p3PWB
# Covariances
REMS ~~ CMI
REMS ~~ PWB
CMI ~~ PWB
"
set.seed(230916)
subsc_msmt_fit <- lavaan::cfa(subsc_msmt_mod, data = dfKim, missing="fiml")
#, missing = "fiml" #deleted this from the above code because it seemed to be slowing it down
subsc_msmt_fit_sum <- lavaan::summary(subsc_msmt_fit, fit.measures = TRUE, standardized = TRUE)
subsc_msmt_fit_sum
set.seed(230916)
items <- c('Inf32', 'Inf38', 'Inf21', 'Inf17', 'Inf9', 'Inf36', 'Inf5', 'Inf22', 'SClass6', 'SClass31', 'SClass8', 'SClass40', 'SClass2', 'SClass34', 'SClass11', 'mInv27', 'mInv30', 'mInv39', 'mInv7', 'mInv26', 'mInv33', 'mInv4', 'mInv14', 'mInv10', 'Exot3', 'Exot29', 'Exot45', 'Exot35', 'Exot42', 'Exot23', 'Exot13', 'Exot20', 'Exot43', 'mEnv37', 'mEnv24', 'mEnv19', 'mEnv28', 'mEnv18', 'mEnv41', 'mEnv12', 'mWork25', 'mWork15', 'mWork1', 'mWork16', 'mWork44')
parcels <- c("REMS_p1", "REMS_p2","REMS_p3")
data.frame(items = sample(items),
parcel = rep(parcels, length = length(items)))
REMS_p1_vars <- c('mWork44','Exot20', 'SClass8', 'Exot43', 'mInv4', 'SClass31', 'SClass40', 'mWork16', 'Exot45', 'SClass2', 'Exot3', 'mEnv24', 'Exot35', 'mInv7', 'Exot13')
REMS_p2_vars <- c('mEnv41','SClass11', 'Inf5', 'mEnv19', 'mInv39', 'Inf22', 'mEnv18', 'mInv30', 'Inf32', 'SClass34', 'Exot29', 'mInv27', 'mInv10', 'mWork1', 'mWork15')
REMS_p3_vars <- c('mWork25','Inf38', 'Inf17', 'Exot23', 'mInv33',  'mEnv28', 'Inf36', 'mInv14', 'mEnv37', 'Inf21', 'mEnv12', 'Exot42', 'SClass6', 'Inf9', 'mInv26')
dfKim$p1REMS <- sjstats::mean_n(dfKim[, REMS_p1_vars], .80)
dfKim$p2REMS <- sjstats::mean_n(dfKim[, REMS_p2_vars], .80)
dfKim$p3REMS <- sjstats::mean_n(dfKim[, REMS_p3_vars], .80)
#If the scoring code above does not work for you, try the format below which involves inserting to periods in front of the variable list. One example is provided.
#dfKim$p3REMS <- sjstats::mean_n(dfKim[, ..REMS_p3_vars], .80)
set.seed(230916)
items <- c(IntRel_vars <- c('cmi1', 'cmi2', 'cmi3', 'cmi4', 'cmi5', 'cmi6', 'cmi7', 'cmi8', 'cmi9', 'cmi10', 'cmi11', 'cmi12', 'cmi13', 'cmi14', 'cmi15', 'cmi16', 'cmi17', 'cmi18', 'cmi19', 'cmi20', 'cmi21', 'cmi22', 'cmi23', 'cmi24', 'cmi25', 'cmi26', 'cmi27', 'cmi28', 'cmi29', 'cmi30', 'cmi31', 'cmi32', 'cmi33', 'cmi34', 'cmi35', 'cmi36', 'cmi37', 'cmi38', 'cmi39', 'cmi40', 'cmi41', 'cmi42', 'cmi43', 'cmi44', 'cmi45', 'cmi46', 'cmi47'))
parcels <- c("CMI_p1", "CMI_p2","CMI_p3")
data.frame(items = sample(items),
parcel = rep(parcels, length = length(items)))
CMI_p1_vars <- c('cmi45', 'cmi32', 'cmi11',	'cmi33', 'cmi22', 'cmi12', 'cmi26', 'cmi25', 'cmi44', 'cmi13', 'cmi31', 'cmi34', 'cmi37', 'cmi43', 'cmi24', 'cmi9')
CMI_p2_vars <- c('cmi39', 'cmi15', 'cmi7', 'cmi38', 'cmi18', 'cmi40', 'cmi47', 'cmi27', 'cmi1', 'cmi14', 'cmi42', 'cmi8', 'cmi19', 'cmi20', 'cmi5', 'cmi16')
CMI_p3_vars <- c('cmi41', 'cmi2', 'cmi4', 'cmi30', 'cmi46', 'cmi6', 'cmi17', 'cmi23', 'cmi10', 'cmi3', 'cmi29', 'cmi28', 'cmi21', 'cmi35', 'cmi36')
dfKim$p1CMI <- sjstats::mean_n(dfKim[, CMI_p1_vars], .80)
dfKim$p2CMI <- sjstats::mean_n(dfKim[, CMI_p2_vars], .80)
dfKim$p3CMI <- sjstats::mean_n(dfKim[, CMI_p3_vars], .80)
#If the scoring code above does not work for you, try the format below which involves inserting to periods in front of the variable list. One example is provided.
#dfKim$p3CMI <- sjstats::mean_n(dfKim[, ..CMI_p3_vars], .80)
rp3_msmt_mod <- "
##measurement model
REMS =~ p1REMS + p2REMS + p3REMS
CMI =~ p1CMI + p2CMI + p3CMI
PWB =~ p1PWB + p2PWB + p3PWB
# Covariances
REMS ~~ CMI
REMS ~~ PWB
CMI ~~ PWB
"
set.seed(230916)
rp3_msmt_fit <- lavaan::cfa(rp3_msmt_mod, data = dfKim, missing = "fiml")
rp3_msmt_fit_sum <- lavaan::summary(rp3_msmt_fit, fit.measures = TRUE, standardized = TRUE)
rp3_msmt_fit_sum
#global fit indices
rp3_msmt_fitstats <- tidySEM::table_fit(rp3_msmt_fit)
write.csv(rp3_msmt_fitstats, file = "rp3_msmt_fitstats.csv")
#parameter estimates
rp3_msmt_pEsts <- tidySEM::table_results(rp3_msmt_fit, digits=3, columns = NULL)
write.csv(rp3_msmt_pEsts, file = "rp3_msmt_pEsts.csv")
#correlations between latent variables
rp3_msmt_LVcorr <- tidySEM::table_cors(rp3_msmt_fit, digits=3)
write.csv(rp3_msmt_LVcorr, file = "rp3_msmt_LVcorr.csv")
semPlot::semPaths(rp3_msmt_fit, what = "col", whatLabels = "stand", sizeMan = 5, node.width = 1, edge.label.cex = .75, style = "lisrel", mar = c(5,5,5,5))
raw <- readRDS("ReC.rds")
View(raw)
babydf <- dplyr::select(raw, Centering, ClearResponsibilities, EffectiveAnswers, Feedback, ClearOrganization, ClearPresentation, InclusvClassrm, EquitableEval, MultPerspectives, DEIintegration)
View(babydf)
str(babydf)
babydf$CENTERING <- as.numeric(babydf$Centering)
babydf$CENTERING <- (babydf$CENTERING - 1)
str(babydf)
set.seed(230916)
items <- c('ClearResponsibilities', 'EffectiveAnswers', 'Feedback', 'ClearOrganization', 'ClearPresentation')
parcels <- c("p1_TR", "p2_TR","p3_TR")
data.frame(items = sample(items),
parcel = rep(parcels, length = length(items)))
TRp1_vars <- c('ClearPresentation','EffectiveAnswers')
TRp2_vars <- c('Feedback','ClearOrganization')
babydf$p1_TR <- sjstats::mean_n(babydf[, ..TRp1_vars], .75)
babydf$p2_TR <- sjstats::mean_n(babydf[, ..TRp2_vars], .75)
#If the scoring code above does not work for you, try the format below which involves removing the periods in front of the variable list. One example is provided.
#babydf$p3_TR <- sjstats::mean_n(babydf[, TRp3_vars], .75)
MADdf <- readRDS("MADdf231001.rds")
View(MADdf)
MADdf <- subset(MADdf, Index == 3)
View(MADdf)
MADdf <- subset(MADdf, Wave == 3)
TwoWay_df <-(dplyr::select (MADdf, myFMprop, PctRblcn, Group))
View(MADdf)
View(MADdf)
TwoWay_df <-(dplyr::select (MADdf, mypropFM_1, PctRblcn, Group))
View(MADdf)
TwoWay_df <-(dplyr::select (MADdf, mypropFM_1, PercentRepublican, Group))
TwoWay_df <-(dplyr::select (MADdf, myFMprop_1, PercentRepublican, Group))
View(MADdf)
TwoWay_df <-(dplyr::select (MADdf, myPropFM_1, PercentRepublican, Group))
View(TwoWay_df)
TwoWay_df <- na.omit(TwoWay_df)
TwoWay_df <- dplyr::rename(TwoWay_df, OwnWearing = myPropFM_1)
TwoWay_df$Party <- cut(OTwoWay_df$PercentRepublican, breaks = c(0, 30, 51, 100),
labels = c("DarkBlue", "Blue", "Red"))
TwoWay_df$Party <- cut(TwoWay_df$PercentRepublican, breaks = c(0, 30, 51, 100),
labels = c("DarkBlue", "Blue", "Red"))
psych::describeBy(OwnWearing ~ Party + Group, data = TwoWay_df, mat=TRUE, digits = 2)
View(TwoWay_df)
TwoWay_df$Party <- cut(TwoWay_df$PercentRepublican, breaks = c(0, .30, .51, .100),
labels = c("DarkBlue", "Blue", "Red"))
psych::describeBy(OwnWearing ~ Party + Group, data = TwoWay_df, mat=TRUE, digits = 2)
TwoWay_df$Party <- cut(TwoWay_df$PercentRepublican, breaks = c(0, .30, .51, 1.00),
labels = c("DarkBlue", "Blue", "Red"))
psych::describeBy(OwnWearing ~ Party + Group, data = TwoWay_df, mat=TRUE, digits = 2)
psych::describe(TwoWay_df
psych::describe(TwoWay_df)
View(TwoWay_df)
MADdf <- readRDS("MADdf231001.rds")
MADdf <- subset(MADdf, Wave == 3)
TwoWay_df <-(dplyr::select (MADdf, myPropFM_1, PercentRepublican, Group))
TwoWay_df <- dplyr::rename(TwoWay_df, OwnWearing = myPropFM_1)
TwoWay_df <- na.omit(TwoWay_df)
TwoWay_df$Party <- cut(TwoWay_df$PercentRepublican, breaks = c(0, .30, .51, 1.00),
labels = c("DarkBlue", "Blue", "Red"))
View(TwoWay_df)
psych::describeBy(OwnWearing ~ Party + Group, data = TwoWay_df, mat=TRUE, digits = 2)
TwoWayDF <- as.data.frame(TwoWay_df)
psych::describe(TwoWayDF)
psych::describeBy(OwnWearing ~ Party + Group, data = TwoWayDF, mat=TRUE, digits = 2)
ggpubr::ggboxplot(TwoWayDF, x = "Group", y = "OwnWearing", add = "jitter",
color = "Party", title = "Figure 1. Evaluations of Wearing Facemasks as a Result of Information Condition and Presidential Voting") #
str(TwoWayDF)
TwoWayDF <- as.factor(TwoWayDF$Group)
str(TwoWayDF)
options(scipen=999)
MADdf <- readRDS("MADdf231001.rds")
MADdf <- subset(MADdf, Wave == 3)
MADdf <- subset(MADdf, Wave == 3)
TwoWay_df <- dplyr::rename(TwoWay_df, OwnWearing = myPropFM_1)
TwoWay_df <-(dplyr::select (MADdf, myPropFM_1, PercentRepublican, Group))
TwoWay_df <- dplyr::rename(TwoWay_df, OwnWearing = myPropFM_1)
TwoWay_df <- na.omit(TwoWay_df)
TwoWay_df$Party <- cut(TwoWay_df$PercentRepublican, breaks = c(0, .30, .51, 1.00),
labels = c("DarkBlue", "Blue", "Red"))
#somehow the above code changed my df so that it wouldn't open
TwoWayDF <- as.data.frame(TwoWay_df)
str(TwoWayDF)
TwoWayDF$Condition <- as.factor(TwoWayDF$Group)
str(TwoWayDF)
psych::describe(TwoWayDF)
psych::describeBy(OwnWearing ~ Party + Condition, data = TwoWayDF, mat=TRUE, digits = 2)
ggpubr::ggboxplot(TwoWayDF, x = "Condition", y = "OwnWearing", add = "jitter",
color = "Party", title = "Figure 1. Evaluations of Wearing Facemasks as a Result of Information Condition and Presidential Voting") #
p <- ggpubr::ggboxplot(TwoWayDF, x = "Condition", y = "OwnWearing", add = "jitter",
color = "Party", title = "Figure 1. Evaluations of Wearing Facemasks as a Result of Information Condition and Presidential Voting") #
p
p <- ggpubr::ggboxplot(TwoWayDF, x = "Condition", y = "OwnWearing", add = "jitter",
color = "Party", title = "Figure 1. Evaluations of Wearing Facemasks as a Result of Information Condition and Presidential Voting") #
p+scale_color_manual(values=c("#000099", "#5353FF", "#FF0000"))
library(ggplot2)
p <- ggpubr::ggboxplot(TwoWayDF, x = "Condition", y = "OwnWearing", add = "jitter",
color = "Party", title = "Figure 1. Evaluations of Wearing Facemasks as a Result of Information Condition and Presidential Voting") #
p+scale_color_manual(values=c("#000099", "#5353FF", "#FF0000"))
p
library(ggplot2)
p <- ggpubr::ggboxplot(TwoWayDF, x = "Condition", y = "OwnWearing", add = "jitter",
color = "Party", title = "Figure 1. Evaluations of Wearing Facemasks as a Result of Information Condition and Presidential Voting") #
p <- p+scale_color_manual(values=c("#000099", "#5353FF", "#FF0000"))
p
psych::describeBy(OwnWearing ~ Condition + Party, mat = TRUE, data = TwoWayDF, digits = 3, type = 1)
TwoWay_Masks <- aov(OwnWearing ~ Condition * Party, TwoWayDF)
summary(TwoWay_Masks)
resid_Masks <- residuals(TwoWay_Masks)
shapiro.test(resid_Masks)
hist(resid_Masks)
qqnorm(resid_Masks)
library(tidyverse)
TwoWayDF %>%
rstatix::identify_outliers(OwnWearing)
rstatix::levene_test(TwoWayDF, OwnWearing ~ Condition * Party)
omnibus2w <- rstatix::anova_test(TwoWayDF, OwnWearing ~ Condition * Party, type = "2", detailed = TRUE)
omnibus2w
library(ggplot2)
p <- ggpubr::ggboxplot(TwoWayDF, x = "Party", y = "OwnWearing", add = "jitter",
color = "Condition", title = "Figure 1. Evaluations of Wearing Facemasks as a Result of Information Condition and Presidential Voting") #
p <- p+scale_color_manual(values=c("#000099", "#5353FF", "#FF0000"))
p
library(ggplot2)
p <- ggpubr::ggboxplot(TwoWayDF, x = "Party", y = "OwnWearing", add = "jitter",
color = "Condition", title = "Figure 1. Evaluations of Wearing Facemasks as a Result of Information Condition and Presidential Voting") #
#p <- p+scale_color_manual(values=c("#000099", "#5353FF", "#FF0000"))
p
TwoWayDF %>%
dplyr::group_by(Party)%>%
rstatix::anova_test(TradPed ~ Condition)
TwoWayDF %>%
dplyr::group_by(Party)%>%
rstatix::anova_test(OwnWearing ~ Condition)
pwCwiP <- TwoWayDF %>%
dplyr::group_by(Party) %>%
rstatix::emmeans_test(OwnWearing ~ Condition, p.adjust.method = "holm")
pwTRwiDP
pwCwiP <- TwoWayDF %>%
dplyr::group_by(Party) %>%
rstatix::emmeans_test(OwnWearing ~ Condition, p.adjust.method = "holm")
pwCwiP
apaTables::apa.2way.table(Party, Condition, OwnWearing, data = TwoWayDF, filename = "2Way.doc", table.number = 1, show.marginal.means = TRUE, landscape = TRUE)
pwCwiP <- pwCwiP %>%
rstatix::add_xy_position(x = "Party")  #x should be whatever the variable was used in the group_by argument
Box2way <- Box2way + ggpubr::stat_pvalue_manual(pwCwiP, label = "p.adj.signif", tip.length = 0.02, hide.ns = TRUE, y.position = c(5.3, 5.5))
library(ggplot2)
box <- ggpubr::ggboxplot(TwoWayDF, x = "Party", y = "OwnWearing", add = "jitter",
color = "Condition", title = "Figure 1. Evaluations of Wearing Facemasks as a Result of Information Condition and Presidential Voting") #
#p <- p+scale_color_manual(values=c("#000099", "#5353FF", "#FF0000"))
box
pwCwiP <- pwCwiP %>%
rstatix::add_xy_position(x = "Party")  #x should be whatever the variable was used in the group_by argument
box <- b0x + ggpubr::stat_pvalue_manual(pwCwiP, label = "p.adj.signif", tip.length = 0.02, hide.ns = TRUE, y.position = c(5.3, 5.5))
pwCwiP <- pwCwiP %>%
rstatix::add_xy_position(x = "Party")  #x should be whatever the variable was used in the group_by argument
box <- box + ggpubr::stat_pvalue_manual(pwCwiP, label = "p.adj.signif", tip.length = 0.02, hide.ns = TRUE, y.position = c(5.3, 5.5))
pwCwiP <- pwCwiP %>%
rstatix::add_xy_position(x = "Party")  #x should be whatever the variable was used in the group_by argument
box <- box + ggpubr::stat_pvalue_manual(pwCwiP, label = "p.adj.signif", tip.length = 0.02, hide.ns = TRUE, y.position = c(90, 95, 100))
pwCwiP <- pwCwiP %>%
rstatix::add_xy_position(x = "Party")  #x should be whatever the variable was used in the group_by argument
box <- box + ggpubr::stat_pvalue_manual(pwCwiP, label = "p.adj.signif", tip.length = 0.02, hide.ns = TRUE)
box
pwCwiP <- pwCwiP %>%
rstatix::add_xy_position(x = "Party")  #x should be whatever the variable was used in the group_by argument
box <- box + ggpubr::stat_pvalue_manual(pwCwiP, label = "p.adj.signif", tip.length = 0.02, hide.ns = FALSE
)
box
pwCwiP <- pwCwiP %>%
rstatix::add_xy_position(x = "Party")  #x should be whatever the variable was used in the group_by argument
box <- box + ggpubr::stat_pvalue_manual(pwCwiP, label = "p.adj.signif", tip.length = 0.02, hide.ns = FALSE
, y.position = c(105, 105, 105))
box
pwCwiP <- pwCwiP %>%
rstatix::add_xy_position(x = "Party")  #x should be whatever the variable was used in the group_by argument
box <- box + ggpubr::stat_pvalue_manual(pwCwiP, label = "p.adj.signif", tip.length = 0.02, hide.ns = FALSE
, y.position = c(105, 105, 105))
box
options(scipen=999)
MADdf <- readRDS("MADdf231001.rds")
MADdf <- subset(MADdf, Wave == 3)
TwoWay_df <-(dplyr::select (MADdf, myPropFM_1, PercentRepublican, Group))
TwoWay_df <- dplyr::rename(TwoWay_df, OwnWearing = myPropFM_1)
TwoWay_df <- na.omit(TwoWay_df)
TwoWay_df$Party <- cut(TwoWay_df$PercentRepublican, breaks = c(0, .30, .51, 1.00),
labels = c("DarkBlue", "Blue", "Red"))
#somehow the above code changed my df so that it wouldn't open
TwoWayDF <- as.data.frame(TwoWay_df)
str(TwoWayDF)
TwoWayDF$Condition <- as.factor(TwoWayDF$Group)
str(TwoWayDF)
psych::describe(TwoWayDF)
psych::describeBy(OwnWearing ~ Party + Condition, data = TwoWayDF, mat=TRUE, digits = 2)
library(ggplot2)
p <- ggpubr::ggboxplot(TwoWayDF, x = "Condition", y = "OwnWearing", add = "jitter",
color = "Party", title = "Figure 1. Evaluations of Wearing Facemasks as a Result of Information Condition and Presidential Voting") #
p <- p+scale_color_manual(values=c("#000099", "#5353FF", "#FF0000"))
p
library(ggplot2)
box <- ggpubr::ggboxplot(TwoWayDF, x = "Party", y = "OwnWearing", add = "jitter",
color = "Condition", title = "Figure 1. Evaluations of Wearing Facemasks as a Result of Information Condition and Presidential Voting") #
#p <- p+scale_color_manual(values=c("#000099", "#5353FF", "#FF0000"))
box
psych::describeBy(OwnWearing ~ Condition + Party, mat = TRUE, data = TwoWayDF, digits = 3, type = 1)
TwoWay_Masks <- aov(OwnWearing ~ Condition * Party, TwoWayDF)
summary(TwoWay_Masks)
resid_Masks <- residuals(TwoWay_Masks)
shapiro.test(resid_Masks)
hist(resid_Masks)
qqnorm(resid_Masks)
library(tidyverse)
TwoWayDF %>%
rstatix::identify_outliers(OwnWearing)
rstatix::levene_test(TwoWayDF, OwnWearing ~ Condition * Party)
omnibus2w <- rstatix::anova_test(TwoWayDF, OwnWearing ~ Condition * Party, type = "2", detailed = TRUE)
omnibus2w
pwCwiP <- TwoWayDF %>%
dplyr::group_by(Party) %>%
rstatix::emmeans_test(OwnWearing ~ Condition, p.adjust.method = "holm")
pwCwiP
apaTables::apa.2way.table(Party, Condition, OwnWearing, data = TwoWayDF, filename = "2Way.doc", table.number = 1, show.marginal.means = TRUE, landscape = TRUE)
pwCwiP <- pwCwiP %>%
rstatix::add_xy_position(x = "Party")  #x should be whatever the variable was used in the group_by argument
box <- box + ggpubr::stat_pvalue_manual(pwCwiP, label = "p.adj.signif", tip.length = 0.02, hide.ns = FALSE
, y.position = c(105, 105, 105))
box
effectsize::eta2_to_f(0.003) #FactorA -- Condition
effectsize::eta2_to_f(0.001) #Factor B -- Party
effectsize::eta2_to_f(0.007) #interaction
119/2
119/3
119/6
pwr2::pwr.2way(a = 2, b = 3, alpha = 0.05, size.A = 59, size.B = 39, f.A = 0.0548546, f.B = 0.0316386)
pwr2::ss.2way(a = 2, b = 3, alpha = 0.05, beta = 0.8, f.A = 0.0548546, f.B = 0.0316386, B = 100)
606/6
psych::describe(TwoWay_df)
TwoWayDF <- TwoWayDF %>%
dplyr::mutate(m_dev = OwnWearing - 105.82)
head(TwoWayDF)
TwoWayDF <- TwoWayDF %>%
mutate(m_devSQ = m_dev^2)
head(TwoWayDF)
SST <- sum(TwoWay_DF$m_devSQ, na.rm=TRUE)
SST <- sum(TwoWayDF$m_devSQ, na.rm=TRUE)
SST
psych::describeBy(OwnWearing ~ Condition + Party, mat = TRUE, data = TwoWayDF, digits = 3)
TwoWayDF <- TwoWayDF %>%
dplyr::mutate(m_dev = OwnWearing - 88.29)
head(TwoWayDF)
TwoWayDF <- TwoWayDF %>%
mutate(m_devSQ = m_dev^2)
head(TwoWayDF)
SST <- sum(TwoWayDF$m_devSQ, na.rm=TRUE)
SST
psych::describeBy(OwnWearing ~ Condition + Party, mat = TRUE, data = TwoWayDF, digits = 3)
SSM <- 20 * (84.450 - 88.29)^2 + 25 * (90.760 - 88.29)^2 + 24 * (89.208 - 88.29)^2 +
31 * (88.742 - 88.29)^2 + 5 * (87.800 - 88.29)^2 + 14 * (87.000 - 88.29)^2
SSM
SSR <- ((23.198^2)*(20-1))+ ((13.311^2)*(25-1)) + ((25.745^2)*(24-1)) + ((20.248^2)*(31-1)) + ((13.609^2)*(5-1)) + ((19.415^2)*(14-1))
SSR
psych::describeBy(OwnWearing ~ Condition, mat=TRUE, data = TwoWayDF, digits=3)
SSM_dept <- 49 * (87.122 - 88.29)^2 + 70 * (89.114 - 88.29)^2
SSM_dept
psych::describeBy(OwnWearing ~ Party, mat=TRUE, data = TwoWayDF, digits=3)
SSM_stage <- 45 * (4.348 - 87.956)^2 + 55 * (88.945 - 88.29)^2 + 19 * (87.211 - 88.29)^2
SSM_stage
SSM_stage <- 45 * (87.956 - 87.956)^2 + 55 * (88.945 - 88.29)^2 + 19 * (87.211 - 88.29)^2
SSM_stage
SSM_int <- 498.491 - (114.375 + 45.712)
SSM_int
114.375 + 45.712
