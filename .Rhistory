Pind1se <- digits(pfit_ParEsts$se[14], 3) #standard error for the  first indirect effect
Pind1se
Pind2 <-  digits(pfit_ParEsts$est[15], 3) #B weight for the second indirect effect
Pind2
Pind2_p <- digits(pfit_ParEsts$pvalue[15], 3) #p value for the second indirect effect
Pind2_p
Pind2se <- digits(pfit_ParEsts$se[15], 3) #standard error for the  first indirect effect
Pind2se
# Contrast
Pctr <-  digits(pfit_ParEsts$est[16], 3) #value of difference between 1st and 2nd indirect effect
Pctr
Pctr_p <- digits(pfit_ParEsts$pvalue[16], 3) #p value for the formal statistical comparison of those values (is their difference statistically signifcant from zero)
Pctr_p
# Total indirect effects
PtotInd <-  digits(pfit_ParEsts$est[17], 3) #sum of the two indirect effects
PtotInd
PtotInd <-  digits(pfit_ParEsts$est[17], 3) #sum of the two indirect effects
PtotInd_se <-  digits(pfit_ParEsts$se[17], 3) # standard error for the sum of the two indirect effects
PtotInd_se
PtotInd_p <- digits(pfit_ParEsts$pvalue[17], 3) #p value assessing if this totalled value is statistically signifciant from zero
PtotInd_p
# Proportion of variance accounted for
PRsq_Y <- percent(pfit_sum$PE$est[20])
PRsq_Y
PRsq_M1 <- percent(pfit_sum$PE$est[21])
PRsq_M1
PRsq_M2 <- percent(pfit_sum$PE$est[22])
PRsq_M2
library(semTable)
Tb1FDataparallel <- semTable(parallel_fit, columns = c("est", "se", "p", "rsquare"),  columnLabels = c(eststars = "Estimate"), paramSets = c("composites", "loadings", "slopes", "intercepts", "residualvariances"), file = "Tb1FakyDataparallel", type = "csv", print.results = TRUE)
library(semPlot)
#note change in layout
semPaths(parallel_fit, #must identiy the model you want to map
what = "est", #"est" plots the estimates, but keeps it greyscale with no fading
#whatLabels = "stand", #"stand" changes to standardized values
#layout = 'tree', rotation = 2, #together, puts predictors on left, IVs on right
layout = 'spring',
edge.label.cex = 1.00, #font size of parameter values
#edge.color = "black", #overwrites the green/black coloring
sizeMan=10, #size of squares/observed/"manifest" variables
fade=FALSE, #if TRUE, there lines are faded such that weaker lines correspond with lower values -- a cool effect, but tough for journals
esize=2,
asize=3,
#label.prop = .5,
label.font = 2.5, #controls size (I think) of font for labels
label.scale = TRUE, #if false, the labels will not scale to fit inside the nodes
nDigits = 3, #decimal places (default is 2)
residuals = FALSE,#excludes residuals (and variances) from the path diagram
nCharNodes = 0, #specifies how many characters to abbreviate variable lables; default is 3.  If 0, uses your entire variable label and adjusts fontsize (which could be a downside)
intercepts = FALSE, #gets rid of those annoying triangles (intercepts) in the path diagram)
)
title("Baked Data:  Parallel Mediation")
#Entering the intercorrelations, means, and standard deviations from the journal article
mu <- c(1.99, 2.82, 2.48, 2.32, 1.75, 5.71, 21.37, 21.07)
sd <- c(.90, .70, .81, .61, .53, 1.03, 3.83, 4.66)
r_mat <- matrix (c(1, .20, .28, .30, .41, .19, -.32, -.18,
.20, 1, .49, .57, .22, .13, -.06, -.13,
.28, .49, 1, .46, .26, .38, -.18,-.08,
.30, .57, .46,  1, .37, .08, -.14, -.06,
.41, .22, .26, .37, 1, .05, -.54, -.28,
.19, .13, .38, .08, .05, 1, -.10, .14,
-.32, -.06, -.18, -.14, -.54, -.10, 1, .47,
-.18, -.13, -.08, -.06, -.28, .14, .47, 1), ncol = 8)
#Creating a covariance matrix
cov_mat <- sd %*% t(sd) * r_mat
cov_mat
#Set random seed so that the following matrix always gets the same results.
set.seed(210403)
library(MASS)
Lewis_df <- mvrnorm(n = 212, mu=mu, Sigma = cov_mat, empirical = TRUE)
colMeans(Lewis_df)
#Checking our work against the original correlation matrix
cor(Lewis_df)
as.data.frame(Lewis_df, row.names = NULL, optional = FALSE, make.names = TRUE)
library(tidyverse)
Lewis_df <- Lewis_df%>%
as.data.frame %>%
rename(GRMS = V1, Sprtlty = V2, SocSup = V3, Engmt = V4, DisEngmt = V5, GRIcntlty = V6, MtnlHlth = V7, PhysHlth = V8)
head(Lewis_df)
library(psych)
psych::describe(Lewis_df)
psych::pairs.panels(Lewis_df)
set.seed(210403)
library(lavaan)
parallel_Lewis <- '
MtnlHlth ~ b1*Engmt + b2*DisEngmt + c_p*GRMS
Engmt ~ a1*GRMS
DisEngmt ~ a2*GRMS
indirect1 := a1 * b1
indirect2 := a2 * b2
contrast := indirect1 - indirect2
total_indirects := indirect1 + indirect2
total_c := c_p + (indirect1) + (indirect2)
direct := c_p
'
para_Lewis_fit <- sem(parallel_Lewis, data = Lewis_df, se = "bootstrap", bootstrap = 1000, missing = 'fiml') #holds the "whole" result
pLewis_sum <- summary(para_Lewis_fit , standardized = TRUE, rsq=T, fit=TRUE, ci=TRUE) #today, we really only need the R-squared from here
pLewis_ParEsts <- parameterEstimates(para_Lewis_fit, boot.ci.type = "bca.simple", standardized=TRUE) #provides our estimates, se, p values for all the elements we specified
pLewis_sum
pLewis_ParEsts
library(formattable)
pLa1 <- digits(pLewis_ParEsts$est[4], 3) #B weight for the a1 path
pLa1
pLa1_p <- digits(pLewis_ParEsts$pvalue[4], 3)#p value for the a1 path
pLa1_p
pLa2 <- digits(pLewis_ParEsts$est[5], 3) #B weight for the a2 path
pLa2
pLa2_p <- digits(pLewis_ParEsts$pvalue[5], 3)#p value for the a2 path
pLa2_p
pLb1 <- digits(pLewis_ParEsts$est[1], 3) #B weight for the b1 path
pLb1
pLb1_p <- digits(pLewis_ParEsts$pvalue[1], 3)#p value for the b1 path
pLb1_p
pLb2 <- digits(pLewis_ParEsts$est[2], 3) #B weight for the b2 path
pLb2
pLb2_p <- digits(pLewis_ParEsts$pvalue[2], 3)#p value for the b2 path
pLb2_p
pLc_p <- digits(pLewis_ParEsts$est[3], 3) #B weight for the c' (direct) path
pLc_p
pLc_p_p <- digits(pLewis_ParEsts$pvalue[3], 3)#p value for the c' (direct) path
pLc_p_p
pLc_p_se <- digits(pLewis_ParEsts$se[3], 3)#standard error for the c' (direct) path
pLc_p_se
pLtot <-  digits(pLewis_ParEsts$est[18], 3)#p value for the c (total) path
pLtot
pLtot_p <- digits(pLewis_ParEsts$pvalue[18], 3)#p value for the c (total) path
pLtot_p
pLtot_se <- digits(pLewis_ParEsts$se[18], 3)#standard error or the  c (total) path
pLtot_se
# Hand calculating the indirect effects
pLind1 <- digits(pLewis_ParEsts$est[4] * pLewis_ParEsts$est[1], 3)
pLind1
pLind2 <- digits(pLewis_ParEsts$est[5] * pLewis_ParEsts$est[2], 3)
pLind2
# Regular retrieval of indirect effects
pLind1 <-  digits(pLewis_ParEsts$est[14], 3) #B weight for the first indirect effect
pLind1
pLind1_p <- digits(pLewis_ParEsts$pvalue[14], 3) #p value for the  first indirect effect
pLind1_p
pLind1se <- digits(pLewis_ParEsts$se[14], 3) #standard error for the  first indirect effect
pLind1se
pLind2 <-  digits(pLewis_ParEsts$est[15], 3) #B weight for the second indirect effect
pLind2
pLind2_p <- digits(pLewis_ParEsts$pvalue[15], 3) #p value for the second indirect effect
pLind2_p
pLind2se <- digits(pLewis_ParEsts$se[15], 3) #standard error for the  first indirect effect
pLind2se
# Contrast
pLctr <-  digits(pLewis_ParEsts$est[16], 3) #value of difference between 1st and 2nd indirect effect
pLctr
pLctr_p <- digits(pLewis_ParEsts$pvalue[16], 3) #p value for the formal statistical comparison of those values (is their difference statistically signifcant from zero)
pLctr_p
# Total indirect effects
pLtotInd <-  digits(pLewis_ParEsts$est[17], 3) #sum of the two indirect effects
pLtotInd
pLtotInd <-  digits(pLewis_ParEsts$est[17], 3) #sum of the two indirect effects
pLtotInd_se <-  digits(pLewis_ParEsts$se[17], 3) # standard error for the sum of the two indirect effects
pLtotInd_se
pLtotInd_p <- digits(pLewis_ParEsts$pvalue[17], 3) #p value assessing if this totalled value is statistically signifciant from zero
pLtotInd_p
# Proportion of variance accounted for
pLRsq_Y <- percent(pLewis_sum$PE$est[20])
pLRsq_Y
pLRsq_M1 <- percent(pLewis_sum$PE$est[21])
pLRsq_M1
pLRsq_M2 <- percent(pLewis_sum$PE$est[22])
pLRsq_M2
library(semPlot)
#note change in layout
semPaths(para_Lewis_fit, #must identiy the model you want to map
what = "est", #"est" plots the estimates, but keeps it greyscale with no fading
#whatLabels = "stand", #"stand" changes to standardized values
#layout = 'tree', rotation = 2, #together, puts predictors on left, IVs on right
layout = 'spring',
edge.label.cex = 1.00, #font size of parameter values
#edge.color = "black", #overwrites the green/black coloring
sizeMan=10, #size of squares/observed/"manifest" variables
fade=FALSE, #if TRUE, there lines are faded such that weaker lines correspond with lower values -- a cool effect, but tough for journals
esize=2,
asize=3,
#label.prop = .5,
label.font = 2.5, #controls size (I think) of font for labels
label.scale = TRUE, #if false, the labels will not scale to fit inside the nodes
nDigits = 3, #decimal places (default is 2)
residuals = FALSE,#excludes residuals (and variances) from the path diagram
nCharNodes = 0, #specifies how many characters to abbreviate variable lables; default is 3.  If 0, uses your entire variable label and adjusts fontsize (which could be a downside)
intercepts = FALSE, #gets rid of those annoying triangles (intercepts) in the path diagram)
)
title("Mental Health from Gendered Racial Microaggressions, Mediated by Engagement and Disengagement Coping")
LewisparaTable <- semTable(para_Lewis_fit, columns = c("est", "se", "p", "rsquare"),  columnLabels = c(eststars = "Estimate"), paramSets = c("composites", "loadings", "slopes", "intercepts", "residualvariances"), file = "LewisParaTable", type = "csv", print.results = TRUE)
set.seed(210403)
library(lavaan)
serial_Lewis <- '
MtnlHlth ~ b1*Engmt + b2*DisEngmt + c_p*GRMS
Engmt ~ a1*GRMS
DisEngmt ~ a2*GRMS
DisEngmt ~ d21*Engmt
indirect1 := a1 * b1
indirect2 := a2 * b2
indirect3 := a1 * d21 * b2
contrast1 := indirect1 - indirect2
contrast2 := indirect1 - indirect3
contrast3 := indirect2 - indirect3
total_indirects := indirect1 + indirect2 + indirect3
total_c := c_p + indirect1 + indirect2 + indirect3
direct := c_p
'
serial_Lewis_fit <- sem(serial_Lewis, data = Lewis_df, se = "bootstrap", missing = 'fiml', bootstrap = 1000)
sLewis_sum <- summary(serial_Lewis_fit, standardized = TRUE, rsq=T, fit=TRUE, ci=TRUE)
sLewis_ParEsts <- parameterEstimates(serial_Lewis_fit, boot.ci.type = "bca.simple", standardized=TRUE)
sLewis_sum
sLewis_ParEsts
library(formattable)
sLa1 <- digits(sLewis_ParEsts$est[4], 3) #B weight for the a1 path
sLa1
sLa1_p <- digits(sLewis_ParEsts$pvalue[4], 3)#p value for the a1 path
sLa1_p
sLa2 <- digits(sLewis_ParEsts$est[5], 3) #B weight for the a2 path
sLa2
sLa2_p <- digits(sLewis_ParEsts$pvalue[5], 3)#p value for the a2 path
sLa2_p
sLb1 <- digits(sLewis_ParEsts$est[1], 3) #B weight for the b1 path
sLb1
sLb1_p <- digits(sLewis_ParEsts$pvalue[1], 3)#p value for the b1 path
sLb1_p
sLb2 <- digits(sLewis_ParEsts$est[2], 3) #B weight for the b2 path
sLb2
sLb2_p <- digits(sLewis_ParEsts$pvalue[2], 3)#p value for the b2 path
sLb2_p
sLc_p <- digits(sLewis_ParEsts$est[3], 3) #B weight for the c' (direct) path
sLc_p
sLc_p_p <- digits(sLewis_ParEsts$pvalue[3], 3)#p value for the c' (direct) path
sLc_p_p
sLc_p_se <- digits(sLewis_ParEsts$se[3], 3)#standard error for the c' (direct) path
sLc_p_se
sLtot <-  digits(sLewis_ParEsts$est[22], 3)#p value for the c (total) path
sLtot
sLtot_p <- digits(sLewis_ParEsts$pvalue[22], 3)#p value for the c (total) path
sLtot_p
sLtot_se <- digits(sLewis_ParEsts$se[22], 3)#standard error or the  c (total) path
sLtot_se
sLd21 <- digits(sLewis_ParEsts$est[6], 3) #B weight for the b2 path
sLd21
sLd21_p <- digits(sLewis_ParEsts$pvalue[6], 3)#p value for the b2 path
sLd21_p
# Hand calculating the indirect effects
sLind1 <- digits(sLewis_ParEsts$est[4] * sLewis_ParEsts$est[1], 3)
sLind1
sLind2 <- digits(sLewis_ParEsts$est[5] * sLewis_ParEsts$est[2], 3)
sLind2
# Regular retrieval of indirect effects
sLind1 <-  digits(sLewis_ParEsts$est[15], 3) #B weight for the first indirect effect
sLind1
sLind1_p <- digits(sLewis_ParEsts$pvalue[15], 3) #p value for the  first indirect effect
sLind1_p
sLind1se <- digits(sLewis_ParEsts$se[15], 3) #standard error for the  first indirect effect
sLind1se
sLind2 <-  digits(sLewis_ParEsts$est[16], 3) #B weight for the second indirect effect
sLind2
sLind2_p <- digits(sLewis_ParEsts$pvalue[16], 3) #p value for the second indirect effect
sLind2_p
sLind2se <- digits(sLewis_ParEsts$se[16], 3) #standard error for the  first indirect effect
sLind2se
sLind3 <-  digits(sLewis_ParEsts$est[17], 3) #B weight for the third indirect effect -- the serial mediation
sLind3
sLind3_p <- digits(sLewis_ParEsts$pvalue[17], 3) #p value for the third indirect effect -- the serial mediation
sLind3_p
sLind3se <- digits(sLewis_ParEsts$se[17], 3) #standard error for the  third indirect effect -- the serial mediation
sLind3se
# Contrasts
sLctr12 <-  digits(sLewis_ParEsts$est[18], 3) #value of difference between 1st and 2nd indirect effects
sLctr12
sLctr12_se <-  digits(sLewis_ParEsts$se[18], 3) #standard error around the difference between 1st and 2nd indirect effects
sLctr12_se
sLctr12_p <- digits(sLewis_ParEsts$pvalue[18], 3) #p value for the formal statistical comparison of those values (is their difference statistically significant from zero)
sLctr12_p
sLctr13 <-  digits(sLewis_ParEsts$est[19], 3) #value of difference between 1st and 3rd indirect effects
sLctr13
sLctr13_se <-  digits(sLewis_ParEsts$se[19], 3) #standard error around the difference between 1st and 2nd indirect effects
sLctr13_se
sLctr13_p <- digits(sLewis_ParEsts$pvalue[19], 3) #p value for the formal statistical comparison of those values (is their difference statistically significant from zero)
sLctr13_p
sLctr23 <-  digits(sLewis_ParEsts$est[20], 3) #value of difference between 2nd and 3rd indirect effects
sLctr23
sLctr23_se <-  digits(sLewis_ParEsts$se[20], 3) #standard error around the difference between 1st and 2nd indirect effects
sLctr23_se
sLctr23_p <- digits(sLewis_ParEsts$pvalue[20], 3) #p value for the formal statistical comparison of those values (is their difference statistically significant from zero)
sLctr23_p
# Total indirect effects
sLtotInd <-  digits(sLewis_ParEsts$est[21], 3) #sum of the two indirect effects
sLtotInd
sLtotInd <-  digits(sLewis_ParEsts$est[21], 3) #sum of the two indirect effects
sLtotInd_se <-  digits(sLewis_ParEsts$se[21], 3) # standard error for the sum of the two indirect effects
sLtotInd_se
sLtotInd_p <- digits(sLewis_ParEsts$pvalue[21], 3) #p value assessing if this totalled value is statistically signifciant from zero
sLtotInd_p
# Proportion of variance accounted for
sLRsq_Y <- percent(sLewis_sum$PE$est[24])
sLRsq_Y
sLRsq_M1 <- percent(sLewis_sum$PE$est[25])
sLRsq_M1
sLRsq_M2 <- percent(sLewis_sum$PE$est[26])
sLRsq_M2
library(semTable)
LewisserialTbl <- semTable(serial_Lewis_fit, columns = c("est", "se", "p", "rsquare"),  columnLabels = c(eststars = "Estimate"), paramSets = c("composites", "loadings", "slopes", "intercepts", "residualvariances"), file = "LewisSerialTbl", type = "csv", print.results = TRUE)
semPaths(serial_Lewis_fit, #must identiy the model you want to map
what = "est", #"est" plots the estimates, but keeps it greyscale with no fading
#whatLabels = "stand", #"stand" changes to standardized values
#layout = 'tree', rotation = 2, #together, puts predictors on left, IVs on right
layout = 'circle',
edge.label.cex = 1.00, #font size of parameter values
#edge.color = "black", #overwrites the green/black coloring
sizeMan=10, #size of squares/observed/"manifest" variables
fade=FALSE, #if TRUE, there lines are faded such that weaker lines correspond with lower values -- a cool effect, but tough for journals
esize=2,
asize=3,
#label.prop = .5,
label.font = 2.5, #controls size (I think) of font for labels
label.scale = TRUE, #if false, the labels will not scale to fit inside the nodes
nDigits = 3, #decimal places (default is 2)
residuals = FALSE,#excludes residuals (and variances) from the path diagram
nCharNodes = 0, #specifies how many characters to abbreviate variable lables; default is 3.  If 0, uses your entire variable label and adjusts fontsize (which could be a downside)
intercepts = FALSE, #gets rid of those annoying triangles (intercepts) in the path diagram)
)
title("The Effect of Gendered Racial Microaggressions on Mental Health through Engaged and Disengaged Coping Styles")
install.packages("semPlot")
# Concerned that identical variable names across book chapters may be problematic, I'm adding "p" in front the "Data" variable.
set.seed(210417)
X <- rnorm(100)
M1 <- 0.5*X + rnorm(100)
M2 <- -0.35*X + rnorm(100)
Y <- 0.7*M2 + 0.48*M1 + rnorm(100)
pData <- data.frame(X = X, Y = Y, M1 = M1, M2 = M2)
library(lavaan)
set.seed(210418)
parallel_med <- '
Y ~ b1*M1 + b2*M2 + c_p*X
M1 ~ a1*X
M2 ~ a2*X
indirect1 := a1 * b1
indirect2 := a2 * b2
contrast := indirect1 - indirect2
total_indirects := indirect1 + indirect2
total_c    := c_p + (indirect1) + (indirect2)
direct := c_p
'
parallel_fit <- sem(parallel_med, data = pData, se = "bootstrap", missing = 'fiml', bootstrap = 1000)
pfit_sum <- summary(parallel_fit, standardized = TRUE, rsq=T, fit=TRUE, ci=TRUE)
pfit_ParEsts <- parameterEstimates(parallel_fit, boot.ci.type = "bca.simple", standardized=TRUE)
pfit_sum
pfit_ParEsts
library(formattable)
Pa1 <- digits(pfit_ParEsts$est[4], 3) #B weight for the a1 path
Pa1
Pa1_p <- digits(pfit_ParEsts$pvalue[4], 3)#p value for the a1 path
Pa1_p
Pa2 <- digits(pfit_ParEsts$est[5], 3) #B weight for the a2 path
Pa2
Pa2_p <- digits(pfit_ParEsts$pvalue[5], 3)#p value for the a2 path
Pa2_p
Pb1 <- digits(pfit_ParEsts$est[1], 3) #B weight for the b1 path
Pb1
Pb1_p <- digits(pfit_ParEsts$pvalue[1], 3)#p value for the b1 path
Pb1_p
Pb2 <- digits(pfit_ParEsts$est[2], 3) #B weight for the b2 path
Pb2
Pb2_p <- digits(pfit_ParEsts$pvalue[2], 3)#p value for the b2 path
Pb2_p
Pc_p <- digits(pfit_ParEsts$est[3], 3) #B weight for the c' (direct) path
Pc_p
Pc_p_p <- digits(pfit_ParEsts$pvalue[3], 3)#p value for the c' (direct) path
Pc_p_p
Pc_p_se <- digits(pfit_ParEsts$se[3], 3)#standard error for the c' (direct) path
Pc_p_se
Ptot <-  digits(pfit_ParEsts$est[18], 3)#p value for the c (total) path
Ptot
Ptot_p <- digits(pfit_ParEsts$pvalue[18], 3)#p value for the c (total) path
Ptot_p
Ptot_se <- digits(pfit_ParEsts$se[18], 3)#standard error or the  c (total) path
Ptot_se
# Hand calculating the indirect effects
Pind1 <- digits(pfit_ParEsts$est[4] * pfit_ParEsts$est[1], 3)
Pind1
Pind2 <- digits(pfit_ParEsts$est[5] * pfit_ParEsts$est[2], 3)
Pind2
# Regular retrieval of indirect effects
Pind1 <-  digits(pfit_ParEsts$est[14], 3) #B weight for the first indirect effect
Pind1
Pind1_p <- digits(pfit_ParEsts$pvalue[14], 3) #p value for the  first indirect effect
Pind1_p
Pind1se <- digits(pfit_ParEsts$se[14], 3) #standard error for the  first indirect effect
Pind1se
Pind2 <-  digits(pfit_ParEsts$est[15], 3) #B weight for the second indirect effect
Pind2
Pind2_p <- digits(pfit_ParEsts$pvalue[15], 3) #p value for the second indirect effect
Pind2_p
Pind2se <- digits(pfit_ParEsts$se[15], 3) #standard error for the  first indirect effect
Pind2se
# Contrast
Pctr <-  digits(pfit_ParEsts$est[16], 3) #value of difference between 1st and 2nd indirect effect
Pctr
Pctr_p <- digits(pfit_ParEsts$pvalue[16], 3) #p value for the formal statistical comparison of those values (is their difference statistically signifcant from zero)
Pctr_p
# Total indirect effects
PtotInd <-  digits(pfit_ParEsts$est[17], 3) #sum of the two indirect effects
PtotInd
PtotInd <-  digits(pfit_ParEsts$est[17], 3) #sum of the two indirect effects
PtotInd_se <-  digits(pfit_ParEsts$se[17], 3) # standard error for the sum of the two indirect effects
PtotInd_se
PtotInd_p <- digits(pfit_ParEsts$pvalue[17], 3) #p value assessing if this totalled value is statistically signifciant from zero
PtotInd_p
# Proportion of variance accounted for
PRsq_Y <- percent(pfit_sum$PE$est[20])
PRsq_Y
PRsq_M1 <- percent(pfit_sum$PE$est[21])
PRsq_M1
PRsq_M2 <- percent(pfit_sum$PE$est[22])
PRsq_M2
library(semTable)
Tb1FDataparallel <- semTable(parallel_fit, columns = c("est", "se", "p", "rsquare"),  columnLabels = c(eststars = "Estimate"), paramSets = c("composites", "loadings", "slopes", "intercepts", "residualvariances"), file = "Tb1FakyDataparallel", type = "csv", print.results = TRUE)
library(semPlot)
#note change in layout
semPaths(parallel_fit, #must identiy the model you want to map
what = "est", #"est" plots the estimates, but keeps it greyscale with no fading
#whatLabels = "stand", #"stand" changes to standardized values
#layout = 'tree', rotation = 2, #together, puts predictors on left, IVs on right
layout = 'spring',
edge.label.cex = 1.00, #font size of parameter values
#edge.color = "black", #overwrites the green/black coloring
sizeMan=10, #size of squares/observed/"manifest" variables
fade=FALSE, #if TRUE, there lines are faded such that weaker lines correspond with lower values -- a cool effect, but tough for journals
esize=2,
asize=3,
#label.prop = .5,
label.font = 2.5, #controls size (I think) of font for labels
label.scale = TRUE, #if false, the labels will not scale to fit inside the nodes
nDigits = 3, #decimal places (default is 2)
residuals = FALSE,#excludes residuals (and variances) from the path diagram
nCharNodes = 0, #specifies how many characters to abbreviate variable lables; default is 3.  If 0, uses your entire variable label and adjusts fontsize (which could be a downside)
intercepts = FALSE, #gets rid of those annoying triangles (intercepts) in the path diagram)
)
title("Baked Data:  Parallel Mediation")
#Entering the intercorrelations, means, and standard deviations from the journal article
mu <- c(1.99, 2.82, 2.48, 2.32, 1.75, 5.71, 21.37, 21.07)
sd <- c(.90, .70, .81, .61, .53, 1.03, 3.83, 4.66)
r_mat <- matrix (c(1, .20, .28, .30, .41, .19, -.32, -.18,
.20, 1, .49, .57, .22, .13, -.06, -.13,
.28, .49, 1, .46, .26, .38, -.18,-.08,
.30, .57, .46,  1, .37, .08, -.14, -.06,
.41, .22, .26, .37, 1, .05, -.54, -.28,
.19, .13, .38, .08, .05, 1, -.10, .14,
-.32, -.06, -.18, -.14, -.54, -.10, 1, .47,
-.18, -.13, -.08, -.06, -.28, .14, .47, 1), ncol = 8)
#Creating a covariance matrix
cov_mat <- sd %*% t(sd) * r_mat
cov_mat
#Set random seed so that the following matrix always gets the same results.
set.seed(210403)
library(MASS)
Lewis_df <- mvrnorm(n = 212, mu=mu, Sigma = cov_mat, empirical = TRUE)
colMeans(Lewis_df)
#Checking our work against the original correlation matrix
cor(Lewis_df)
as.data.frame(Lewis_df, row.names = NULL, optional = FALSE, make.names = TRUE)
library(tidyverse)
Lewis_df <- Lewis_df%>%
as.data.frame %>%
rename(GRMS = V1, Sprtlty = V2, SocSup = V3, Engmt = V4, DisEngmt = V5, GRIcntlty = V6, MtnlHlth = V7, PhysHlth = V8)
head(Lewis_df)
library(psych)
psych::describe(Lewis_df)
psych::pairs.panels(Lewis_df)
set.seed(210403)
library(lavaan)
parallel_Lewis <- '
MtnlHlth ~ b1*Engmt + b2*DisEngmt + c_p*GRMS
Engmt ~ a1*GRMS
DisEngmt ~ a2*GRMS
indirect1 := a1 * b1
indirect2 := a2 * b2
contrast := indirect1 - indirect2
total_indirects := indirect1 + indirect2
total_c := c_p + (indirect1) + (indirect2)
direct := c_p
'
para_Lewis_fit <- sem(parallel_Lewis, data = Lewis_df, se = "bootstrap", bootstrap = 1000, missing = 'fiml') #holds the "whole" result
pLewis_sum <- summary(para_Lewis_fit , standardized = TRUE, rsq=T, fit=TRUE, ci=TRUE) #today, we really only need the R-squared from here
pLewis_ParEsts <- parameterEstimates(para_Lewis_fit, boot.ci.type = "bca.simple", standardized=TRUE) #provides our estimates, se, p values for all the elements we specified
#Entering the intercorrelations, means, and standard deviations from the journal article
mu <- c(.34, 3.00, 2.98, 2.36, 3.50, 1.64)
sd <- c(.16, .83, .99, .90, .90, .53)
r_mat <- matrix (c(1,   .59, .26,   .34,  -.25, -.02,
.59, 1.00, .12,   .19,  -.28, .00,
.26,  .12, 1.00, .66,  -.55, .07,
.34,  .19, .66,  1.00, -.66, .05,
-.25, -.28, -.55,-.66,  1.00, .08,
-.02,  .00,  .07, .05, .08,  1), ncol = 6)
#Creating a covariance matrix
cov_mat <- sd %*% t(sd) * r_mat
#Set random seed so that the following matrix always gets the same results.
set.seed(210409)
library(MASS)
Kim_df <- mvrnorm(n = 156, mu=mu, Sigma = cov_mat, empirical = TRUE)
colMeans(Kim_df)
#Checking our work against the original correlation matrix
round(cor(Kim_df),3)
#renaming the variables
as.data.frame(Kim_df, row.names = NULL, optional = FALSE, make.names = TRUE)
library(tidyverse)
Kim_df <- Kim_df%>%
as.data.frame %>%
rename(REMS = V1, CMI = V2, ANX = V3, DEP = V4, PWB = V5, HlpSk = V6)
