raw <-(dplyr::filter(raw, Course == "Multivariate"))
TradPed_vars <- c('ClearResponsibilities', 'EffectiveAnswers','Feedback', 'ClearOrganization','ClearPresentation')
raw$TradPed <- sjstats::mean_n(raw[, ..TradPed_vars], .75)
Valued_vars <- c('ValObjectives', 'IncrUnderstanding','IncrInterest')
raw$Valued <- sjstats::mean_n(raw[, ..Valued_vars], .75)
SRPed_vars <- c('InclusvClassrm','EquitableEval', 'MultPerspectives', 'DEIintegration')
raw$SRPed <- sjstats::mean_n(raw[,..SRPed_vars], .75)
babydf <- dplyr::select(raw, Centering, TradPed, SRPed, Valued)
str(babydf)
babydf$CENTERING <- as.numeric(babydf$Centering)
babydf$CENTERING <- (babydf$CENTERING - 1)
str(babydf)
View(babydf)
psych::pairs.panels(babydf)
mod_a_path <- lm(SRPed~Centering*TradPed, data=babydf)
#the base R output if you prefer this view
summary(mod_a_path)
interactions::sim_slopes(mod_a_path, pred = TradPed, modx = Centering)
#sim_slopes(Mod_a_path, pred=GRIcntlty, modx = GRMS) #sometimes I like to look at it in reverse -- like in the plots
set.seed(230925)
ModMedOnA <- '
#equations
SRPed ~ a1*CENTERING + a2*TradPed + a3*CENTERING:TradPed
Valued ~ c_p*CENTERING + b*SRPed
#intercepts
SRPed ~ SRPed.mean*1
Valued ~ Valued.mean*1
#means, variances of W for simple slopes
TradPed ~ TradPed.mean*1
TradPed ~~ TradPed.var*TradPed
#index of moderated mediation, there will be an a and b path in the product
#if the a and/or b path is moderated, select the label that represents the moderation
imm := a3*b
#Note that we first create the indirect product, then add to it the product of the imm and the W level
indirect.SDbelow := a1*b + imm*(TradPed.mean - sqrt(TradPed.var))
indirect.mean := a1*b + imm*(TradPed.mean)
indirect.SDabove := a1*b + imm*(TradPed.mean + sqrt(TradPed.var))
'
set.seed(230925) #required for reproducible results because lavaan introduces randomness into the calculations
ModMedOnA_fit <- lavaan::sem(ModMedOnA, data =babydf, se = "bootstrap", missing = 'fiml', bootstrap = 1000)
ModMedOnAsum <- lavaan::summary(ModMedOnA_fit, standardized = TRUE, rsq=T, ci=TRUE)
ModMedOnAParamEsts <- lavaan::parameterEstimates(ModMedOnA_fit, boot.ci.type = "bca.simple", standardized=TRUE)
ModMedOnAsum
ModMedOnAParamEsts
#only worked when I used the library to turn on all these pkgs
library(lavaan)
library(dplyr)
library(ggplot2)
library(tidySEM)
tidySEM::graph_sem(model = ModMedOnA_fit)
tidySEM::get_layout(ModMedOnA_fit)
comb_map <- tidySEM::get_layout("", "SRPed", "",
"CENTERING", "", "Valued",
"TradPed", "","",
"", "CENTERING:TradPed","", rows=4)
comb_map
tidySEM::graph_sem(ModMedOnA_fit, layout=comb_map,  rect_width = 1.5, rect_height = 1.25, spacing_x = 2, spacing_y = 3, text_size = 3.5)
write.csv (ModMedOnAParamEsts, file="ModMedOnAParamEsts.csv") #optional to write it to a .csv file
write.csv (ModMedOnAParamEsts, file="ModMedOnAParamEsts.csv") #optional to write it to a .csv file
write.csv (ModMedOnAParamEsts, file="ModMedOnAParamEsts.csv") #optional to write it to a .csv file
raw <- readRDS("ReC.rds")
raw <-(dplyr::filter(raw, Course == "Multivariate"))
TradPed_vars <- c('ClearResponsibilities', 'EffectiveAnswers','Feedback', 'ClearOrganization','ClearPresentation')
raw$TradPed <- sjstats::mean_n(raw[, ..TradPed_vars], .75)
Valued_vars <- c('ValObjectives', 'IncrUnderstanding','IncrInterest')
raw$Valued <- sjstats::mean_n(raw[, ..Valued_vars], .75)
SRPed_vars <- c('InclusvClassrm','EquitableEval', 'MultPerspectives', 'DEIintegration')
raw$SRPed <- sjstats::mean_n(raw[,..SRPed_vars], .75)
babydf <- dplyr::select(raw, Centering, TradPed, SRPed, Valued)
str(babydf)
babydf$CENTERING <- as.numeric(babydf$Centering)
babydf$CENTERING <- (babydf$CENTERING - 1)
str(babydf)
psych::pairs.panels(babydf)
Mod_b_path <- lm(Valued~SRPed*TradPed, data=babydf)
#the base R output if you prefer this view
summary(Mod_b_path)
#library(jtools) #the summ function creates a terrific regression table
#library(interactions)
library(ggplot2)
jtools::summ(Mod_b_path, digits = 3)
interactions::interact_plot(Mod_b_path, pred = SRPed, modx = TradPed) + ylim (1,5)
interactions::sim_slopes(Mod_b_path, pred = SRPed, modx = TradPed)
#interactions::sim_slopes(Mod_b_path, pred=TradPed, modx = SRPed) #sometimes I like to look at it in reverse -- like in the plots
library(lavaan)
medmodel <- '
Valued ~ b*SRPed + c_p*CENTERING
SRPed ~a*CENTERING
#intercepts
CENTERING ~ CENTERING.mean*1
Valued ~ Valued.mean*1
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
'
set.seed(230925) #required for reproducible results because lavaan introduces randomness into the calculations
medmodel_fit <- lavaan::sem(medmodel, data = babydf, se="bootstrap", missing = 'fiml')
medmodel_Sum <-  lavaan::summary(medmodel_fit, standardized=T, rsq=T, ci=TRUE)
medmodel_ParEsts<- lavaan::parameterEstimates(medmodel_fit, boot.ci.type = "bca.simple", standardized=TRUE)
medmodel_Sum
medmodel_ParEsts
#only worked when I used the library to turn on all these pkgs
library(lavaan)
library(dplyr)
library(ggplot2)
library(tidySEM)
tidySEM::graph_sem(model = medmodel_fit)
tidySEM::get_layout(medmodel_fit)
medmap <- tidySEM::get_layout("", "SRPed", "",
"CENTERING", "", "Valued",  rows=2)
medmap
tidySEM::graph_sem(medmodel_fit, layout=medmap,  rect_width = 1.25, rect_height = 1.25, spacing_x = 2, spacing_y = 3, text_size = 4.5)
set.seed(230925)
ModMedOnB <- '
#equations
SRPed ~ a*CENTERING
Valued ~ cp*CENTERING + b1*SRPed + b2*TradPed + b3*SRPed:TradPed
#intercepts
SRPed ~ SRPed.mean*1
Valued ~ Valued.mean*1
#means, variances of W for simple slopes
TradPed ~ TradPed.mean*1
TradPed ~~ TradPed.var*TradPed
#index of moderated mediation, there will be an a and b path in the product
#if the a and/or b path is moderated, select the label that represents the moderation
imm := a*b3
#Note that we first create the indirect product, then add to it the product of the imm and the W level
indirect.SDbelow := a*b1 + imm*(TradPed.mean - sqrt(TradPed.var))
indirect.mean := a*b1 + imm*(TradPed.mean)
indirect.SDabove := a*b1 + imm*(TradPed.mean + sqrt(TradPed.var))
'
set.seed(230925) #required for reproducible results because lavaan introduces randomness into the calculations
ModMedOnB_fit <- lavaan::sem(ModMedOnB, data =babydf, se = "bootstrap", missing = 'fiml', bootstrap = 1000)
ModMedOnBsum <- lavaan::summary(ModMedOnB_fit, standardized = TRUE, rsq=T, ci=TRUE)
ModMedOnBParamEsts <- lavaan::parameterEstimates(ModMedOnB_fit, boot.ci.type = "bca.simple", standardized=TRUE)
ModMedOnBsum
ModMedOnBParamEsts
#only worked when I used the library to turn on all these pkgs
library(lavaan)
library(dplyr)
library(ggplot2)
library(tidySEM)
tidySEM::graph_sem(model = ModMedOnB_fit)
tidySEM::get_layout(ModMedOnB_fit)
comb_map <- tidySEM::get_layout("", "SRPed", "TradPed", "SRPed:TradPed",
"CENTERING", "", "Valued", "", rows=2)
comb_map
tidySEM::graph_sem(ModMedOnB_fit, layout=comb_map,  rect_width = 1.25, rect_height = 1.25, spacing_x = 2, spacing_y = 3, text_size = 3.5)
write.csv (ModMedOnBParamEsts, file="ModMedOnBParamEsts.csv") #optional to write it to a .csv file
interactions::interact_plot(Mod_b_path, pred = SRPed, modx = TradPed) + ylim(1,5)
#interactions::interact_plot(Mod_c_path, pred = TradPed, modx = SRPed + ylim(1,5))
raw <- readRDS("ReC.rds")
View(raw)
raw <-(dplyr::filter(raw, Course == "Multivariate"))
TradPed_vars <- c('ClearResponsibilities', 'EffectiveAnswers','Feedback', 'ClearOrganization','ClearPresentation')
raw$TradPed <- sjstats::mean_n(raw[, ..TradPed_vars], .75)
Valued_vars <- c('ValObjectives', 'IncrUnderstanding','IncrInterest')
raw$Valued <- sjstats::mean_n(raw[, ..Valued_vars], .75)
SRPed_vars <- c('InclusvClassrm','EquitableEval', 'MultPerspectives', 'DEIintegration')
raw$SRPed <- sjstats::mean_n(raw[,..SRPed_vars], .75)
View(raw)
babydf <- dplyr::select(raw, Centering, TradPed, SRPed, Valued)
View(babydf)
str(babydf)
babydf$CENTERING <- as.numeric(babydf$Centering)
babydf$CENTERING <- (babydf$CENTERING - 1)
str(babydf)
psych::pairs.panels(babydf)
Mod_b_path <- lm(Valued~SRPed*TradPed, data=babydf)
#the base R output if you prefer this view
summary(Mod_b_path)
#library(jtools) #the summ function creates a terrific regression table
#library(interactions)
library(ggplot2)
jtools::summ(Mod_b_path, digits = 3)
interactions::interact_plot(Mod_b_path, pred = SRPed, modx = TradPed) + ylim (1,5)
interactions::sim_slopes(Mod_b_path, pred = SRPed, modx = TradPed)
#interactions::sim_slopes(Mod_b_path, pred=TradPed, modx = SRPed) #sometimes I like to look at it in reverse -- like in the plots
library(lavaan)
medmodel <- '
Valued ~ b*SRPed + c_p*CENTERING
SRPed ~a*CENTERING
#intercepts
CENTERING ~ CENTERING.mean*1
Valued ~ Valued.mean*1
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
'
set.seed(230925) #required for reproducible results because lavaan introduces randomness into the calculations
medmodel_fit <- lavaan::sem(medmodel, data = babydf, se="bootstrap", missing = 'fiml')
medmodel_Sum <-  lavaan::summary(medmodel_fit, standardized=T, rsq=T, ci=TRUE)
medmodel_ParEsts<- lavaan::parameterEstimates(medmodel_fit, boot.ci.type = "bca.simple", standardized=TRUE)
medmodel_Sum
medmodel_ParEsts
#only worked when I used the library to turn on all these pkgs
library(lavaan)
library(dplyr)
library(ggplot2)
library(tidySEM)
tidySEM::graph_sem(model = medmodel_fit)
tidySEM::get_layout(medmodel_fit)
medmap <- tidySEM::get_layout("", "SRPed", "",
"CENTERING", "", "Valued",  rows=2)
medmap
tidySEM::graph_sem(medmodel_fit, layout=medmap,  rect_width = 1.25, rect_height = 1.25, spacing_x = 2, spacing_y = 3, text_size = 4.5)
set.seed(230925)
ModMedOnB <- '
#equations
SRPed ~ a*CENTERING
Valued ~ cp*CENTERING + b1*SRPed + b2*TradPed + b3*SRPed:TradPed
#intercepts
SRPed ~ SRPed.mean*1
Valued ~ Valued.mean*1
#means, variances of W for simple slopes
TradPed ~ TradPed.mean*1
TradPed ~~ TradPed.var*TradPed
#index of moderated mediation, there will be an a and b path in the product
#if the a and/or b path is moderated, select the label that represents the moderation
imm := a*b3
#Note that we first create the indirect product, then add to it the product of the imm and the W level
indirect.SDbelow := a*b1 + imm*(TradPed.mean - sqrt(TradPed.var))
indirect.mean := a*b1 + imm*(TradPed.mean)
indirect.SDabove := a*b1 + imm*(TradPed.mean + sqrt(TradPed.var))
'
set.seed(230925) #required for reproducible results because lavaan introduces randomness into the calculations
ModMedOnB_fit <- lavaan::sem(ModMedOnB, data =babydf, se = "bootstrap", missing = 'fiml', bootstrap = 1000)
ModMedOnBsum <- lavaan::summary(ModMedOnB_fit, standardized = TRUE, rsq=T, ci=TRUE)
ModMedOnBParamEsts <- lavaan::parameterEstimates(ModMedOnB_fit, boot.ci.type = "bca.simple", standardized=TRUE)
ModMedOnBsum
ModMedOnBParamEsts
#only worked when I used the library to turn on all these pkgs
library(lavaan)
library(dplyr)
library(ggplot2)
library(tidySEM)
tidySEM::graph_sem(model = ModMedOnB_fit)
tidySEM::get_layout(ModMedOnB_fit)
comb_map <- tidySEM::get_layout("", "SRPed", "TradPed", "SRPed:TradPed",
"CENTERING", "", "Valued", "", rows=2)
comb_map
tidySEM::graph_sem(ModMedOnB_fit, layout=comb_map,  rect_width = 1.25, rect_height = 1.25, spacing_x = 2, spacing_y = 3, text_size = 3.5)
write.csv (ModMedOnBParamEsts, file="ModMedOnBParamEsts.csv") #optional to write it to a .csv file
interactions::interact_plot(Mod_b_path, pred = SRPed, modx = TradPed) + ylim(1,5)
#interactions::interact_plot(Mod_c_path, pred = TradPed, modx = SRPed + ylim(1,5))
citr:::insert_citation()
#Entering the intercorrelations, means, and standard deviations from the journal article
Kim_generating_model <- "
##measurement model
REMS =~ .82*Inf32 + .75*Inf38 + .74*Inf21 + .72*Inf17 + .69*Inf9 + .61*Inf36 + .51*Inf5 + .49*Inf22 + .81*SClass6 + .81*SClass31 + .74*SClass8 + .74*SClass40 + .72*SClass2 + .65*SClass34 + .55*SClass11 + .84*mInv27 + .84*mInv30 + .80*mInv39 + .72*mInv7 + .62*mInv26 + .61*mInv33 + .53*mInv4 + .47*mInv14 + .47*mInv10 + .74*Exot3 + .74*Exot29 + .71*Exot45 + .69*Exot35 + .60*Exot42 + .59*Exot23 + .51*Exot13 + .51*Exot20 + .49*Exot43 + .84*mEnv37 + .85*mEnv24 + .78*mEnv19 + .70*mEnv28 + .69*mEnv18 + .55*mEnv41 + .55*mEnv12 + .76*mWork25 + .67*mWork15 + .65*mWork1 + .64*mWork16 + .62*mWork44
CMI =~ .8*cmi1 + .8*cmi2 + .8*cmi3 + .8*cmi4 + .8*cmi5 + .8*cmi6 + .8*cmi7 + .8*cmi8 + .8*cmi9 + .8*cmi10 + .8*cmi11 + .8*cmi12 + .8*cmi13 + .8*cmi14 + .8*cmi15 + .8*cmi16 + .8*cmi17 + .8*cmi18 + .8*cmi19 + .8*cmi20 + .8*cmi21 + .8*cmi22 + .8*cmi23 + .8*cmi24 + .8*cmi25 + .8*cmi26 + .8*cmi27 + .8*cmi28 + .8*cmi29 + .8*cmi30 + .8*cmi31 + .8*cmi32 + .8*cmi33 + .8*cmi34 + .8*cmi35 + .8*cmi36 + .8*cmi37 + .8*cmi38 + .8*cmi39 + .8*cmi40 + .8*cmi41 + .8*cmi42 + .8*cmi43 + .8*cmi44 + .8*cmi45 + .8*cmi46 + .8*cmi47
ANX =~ .80*Anx1 + .80*Anx2 + .77*Anx3 + .74*Anx4 + .74*Anx5 + .69*Anx6 + .69*Anx7 + .68*Anx8 + .50*Anx9
DEP =~ .74*Dep1 + .83*Dep2 + .82*Dep3 + .74*Dep4
PWB =~ .83*pwb1 + .72*pwb2 + .67*pwb3 + .79*pwb4 + .77*pwb5 + .75*pwb6 + .74*pwb7 +.71*pwb8 +.67*pwb9 +.61*pwb10 +.58*pwb11
HlpSkg =~ .8*hlpskg1 + .8*hlpskg2 + .8*hlpskg3 + .8*hlpskg4 + .8*hlpskg5 + .8*hlpskg6 + .8*hlpskg7 + .8*hlpskg8 + .8*hlpskg9 + .8*hlpskg10
# Means
REMS ~ 0.34*1
CMI ~ 3*1
ANX ~ 2.98*1
DEP ~ 2.36*1
PWB ~ 3.5*1
HlpSkg ~ 1.64*1
# Correlations (ha!)
REMS ~ 0.58*CMI
REMS ~ 0.26*ANX
REMS ~ 0.34*DEP
REMS ~ -0.25*PWB
REMS ~ -0.02*HlpSkg
CMI ~ 0.12*ANX
CMI ~ 0.19*DEP
CMI ~ -0.28*PWB
CMI ~ 0*HlpSkg
ANX ~ 0.66*DEP
ANX ~ -0.55*PWB
ANX ~ 0.07*HlpSkg
DEP ~ -0.66*PWB
DEP ~ 0.05*HlpSkg
PWB ~ 0.08*HlpSkg
"
set.seed(230916)
dfKim <- lavaan::simulateData(model = Kim_generating_model,
model.type = "sem",
meanstructure = T,
sample.nobs=156,
standardized=FALSE)
library(tidyverse)
#used to retrieve column indices used in the rescaling script below
col_index <- as.data.frame(colnames(dfKim))
for(i in 1:ncol(dfKim)){  # for loop to go through each column of the dataframe
if(i >= 1 & i <= 45){   # apply only to REMS variables
dfKim[,i] <- scales::rescale(dfKim[,i], c(0, 1))
}
if(i >= 46 & i <= 116){   # apply only to CMI variables
dfKim[,i] <- scales::rescale(dfKim[,i], c(1, 7))
}
if(i >= 93 & i <= 116){   # apply only to mental health variables
dfKim[,i] <- scales::rescale(dfKim[,i], c(1, 5))
}
if(i >= 117 & i <= 126){   # apply only to HlpSkng variables
dfKim[,i] <- scales::rescale(dfKim[,i], c(0, 3))
}
}
#psych::describe(dfKim)
library(tidyverse)
dfKim <- dfKim %>% round(0)
#I tested the rescaling the correlation between original and rescaled variables is 1.0
#Kim_df_latent$INF32 <- scales::rescale(Kim_df_latent$Inf32, c(0, 1))
#cor.test(Kim_df_latent$Inf32, Kim_df_latent$INF32, method="pearson")
#Checking our work against the original correlation matrix
#round(cor(Kim_df),3)
View(dfKim)
LVMed_model <- "
#measurement model
REMS =~ Inf32 + Inf38 + Inf21 + Inf17 + Inf9 + Inf36 + Inf5 + Inf22 + SClass6 + SClass31 + SClass8 + SClass40 + SClass2 + SClass34 + SClass11 + mInv27 + mInv30 + mInv39 + mInv7 + mInv26 + mInv33 + mInv4 + mInv14 + mInv10 + Exot3 + Exot29 + Exot45 + Exot35 + Exot42 + Exot23 + Exot13 + Exot20 + Exot43 + mEnv37 + mEnv24 + mEnv19 + mEnv28 + mEnv18 + mEnv41 + mEnv12 + mWork25 + mWork15 + mWork1 + mWork16 + mWork44
CMI =~ cmi1 + cmi2 + cmi3 + cmi4 + cmi5 + cmi6 + cmi7 + cmi8 + cmi9 + cmi10 + cmi11 + cmi12 + cmi13 + cmi14 + cmi15 + cmi16 + cmi17 + cmi18 + cmi19 + cmi20 + cmi21 + cmi22 + cmi23 + cmi24 + cmi25 + cmi26 + cmi27 + cmi28 + cmi29 + cmi30 + cmi31 + cmi32 + cmi33 + cmi34 + cmi35 + cmi36 + cmi37 + cmi38 + cmi39 + cmi40 + cmi41 + cmi42 + cmi43 + cmi44 + cmi45 + cmi46 + cmi47
PWB =~ pwb1 + pwb2 + pwb3 + pwb4 + pwb5 + pwb6 + pwb7 + pwb8 + pwb9 + pwb10
PWB ~ b*CMI + c_p*REMS
CMI ~a*REMS
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
"
set.seed(230925) #required for reproducible results because lavaan introduces randomness into the calculations
MedFit <- lavaan::sem(LVMed, data = dfKim, se="bootstrap", missing = 'fiml')
LVMed_model <- "
#measurement model
REMS =~ Inf32 + Inf38 + Inf21 + Inf17 + Inf9 + Inf36 + Inf5 + Inf22 + SClass6 + SClass31 + SClass8 + SClass40 + SClass2 + SClass34 + SClass11 + mInv27 + mInv30 + mInv39 + mInv7 + mInv26 + mInv33 + mInv4 + mInv14 + mInv10 + Exot3 + Exot29 + Exot45 + Exot35 + Exot42 + Exot23 + Exot13 + Exot20 + Exot43 + mEnv37 + mEnv24 + mEnv19 + mEnv28 + mEnv18 + mEnv41 + mEnv12 + mWork25 + mWork15 + mWork1 + mWork16 + mWork44
CMI =~ cmi1 + cmi2 + cmi3 + cmi4 + cmi5 + cmi6 + cmi7 + cmi8 + cmi9 + cmi10 + cmi11 + cmi12 + cmi13 + cmi14 + cmi15 + cmi16 + cmi17 + cmi18 + cmi19 + cmi20 + cmi21 + cmi22 + cmi23 + cmi24 + cmi25 + cmi26 + cmi27 + cmi28 + cmi29 + cmi30 + cmi31 + cmi32 + cmi33 + cmi34 + cmi35 + cmi36 + cmi37 + cmi38 + cmi39 + cmi40 + cmi41 + cmi42 + cmi43 + cmi44 + cmi45 + cmi46 + cmi47
PWB =~ pwb1 + pwb2 + pwb3 + pwb4 + pwb5 + pwb6 + pwb7 + pwb8 + pwb9 + pwb10
PWB ~ b*CMI + c_p*REMS
CMI ~a*REMS
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
"
set.seed(230925) #required for reproducible results because lavaan introduces randomness into the calculations
MedFit <- lavaan::sem(LVMed_model, data = dfKim, se="bootstrap", missing = 'fiml')
MedFitSum <-  lavaan::summary(Med_fit, standardized=T, rsq=T, ci=TRUE)
LVMed_model <- "
#measurement model
REMS =~ Inf32 + Inf38 + Inf21 + Inf17 + Inf9 + Inf36 + Inf5 + Inf22 + SClass6 + SClass31 + SClass8 + SClass40 + SClass2 + SClass34 + SClass11 + mInv27 + mInv30 + mInv39 + mInv7 + mInv26 + mInv33 + mInv4 + mInv14 + mInv10 + Exot3 + Exot29 + Exot45 + Exot35 + Exot42 + Exot23 + Exot13 + Exot20 + Exot43 + mEnv37 + mEnv24 + mEnv19 + mEnv28 + mEnv18 + mEnv41 + mEnv12 + mWork25 + mWork15 + mWork1 + mWork16 + mWork44
CMI =~ cmi1 + cmi2 + cmi3 + cmi4 + cmi5 + cmi6 + cmi7 + cmi8 + cmi9 + cmi10 + cmi11 + cmi12 + cmi13 + cmi14 + cmi15 + cmi16 + cmi17 + cmi18 + cmi19 + cmi20 + cmi21 + cmi22 + cmi23 + cmi24 + cmi25 + cmi26 + cmi27 + cmi28 + cmi29 + cmi30 + cmi31 + cmi32 + cmi33 + cmi34 + cmi35 + cmi36 + cmi37 + cmi38 + cmi39 + cmi40 + cmi41 + cmi42 + cmi43 + cmi44 + cmi45 + cmi46 + cmi47
PWB =~ pwb1 + pwb2 + pwb3 + pwb4 + pwb5 + pwb6 + pwb7 + pwb8 + pwb9 + pwb10
PWB ~ b*CMI + c_p*REMS
CMI ~a*REMS
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
"
test.model <- lavaan::sem(LVMed_model, data = dfKim)
summary(test.model)
LVMed_model <- "
#measurement model
REMS =~ Inf32 + Inf38 + Inf21 + Inf17 + Inf9 + Inf36 + Inf5 + Inf22 + SClass6 + SClass31 + SClass8 + SClass40 + SClass2 + SClass34 + SClass11 + mInv27 + mInv30 + mInv39 + mInv7 + mInv26 + mInv33 + mInv4 + mInv14 + mInv10 + Exot3 + Exot29 + Exot45 + Exot35 + Exot42 + Exot23 + Exot13 + Exot20 + Exot43 + mEnv37 + mEnv24 + mEnv19 + mEnv28 + mEnv18 + mEnv41 + mEnv12 + mWork25 + mWork15 + mWork1 + mWork16 + mWork44
CMI =~ cmi1 + cmi2 + cmi3 + cmi4 + cmi5 + cmi6 + cmi7 + cmi8 + cmi9 + cmi10 + cmi11 + cmi12 + cmi13 + cmi14 + cmi15 + cmi16 + cmi17 + cmi18 + cmi19 + cmi20 + cmi21 + cmi22 + cmi23 + cmi24 + cmi25 + cmi26 + cmi27 + cmi28 + cmi29 + cmi30 + cmi31 + cmi32 + cmi33 + cmi34 + cmi35 + cmi36 + cmi37 + cmi38 + cmi39 + cmi40 + cmi41 + cmi42 + cmi43 + cmi44 + cmi45 + cmi46 + cmi47
PWB =~ pwb1 + pwb2 + pwb3 + pwb4 + pwb5 + pwb6 + pwb7 + pwb8 + pwb9 + pwb10
PWB ~ b*CMI + c_p*REMS
CMI ~a*REMS
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
"
test.model <- lavaan::sem(LVMed_model, data = dfKim)
summary(test.model)
LVMed_model <- "
#measurement model
REMS =~ Inf32 + Inf38 + Inf21 + Inf17 + Inf9 + Inf36 + Inf5 + Inf22 + SClass6 + SClass31 + SClass8 + SClass40 + SClass2 + SClass34 + SClass11 + mInv27 + mInv30 + mInv39 + mInv7 + mInv26 + mInv33 + mInv4 + mInv14 + mInv10 + Exot3 + Exot29 + Exot45 + Exot35 + Exot42 + Exot23 + Exot13 + Exot20 + Exot43 + mEnv37 + mEnv24 + mEnv19 + mEnv28 + mEnv18 + mEnv41 + mEnv12 + mWork25 + mWork15 + mWork1 + mWork16 + mWork44
CMI =~ cmi1 + cmi2 + cmi3 + cmi4 + cmi5 + cmi6 + cmi7 + cmi8 + cmi9 + cmi10 + cmi11 + cmi12 + cmi13 + cmi14 + cmi15 + cmi16 + cmi17 + cmi18 + cmi19 + cmi20 + cmi21 + cmi22 + cmi23 + cmi24 + cmi25 + cmi26 + cmi27 + cmi28 + cmi29 + cmi30 + cmi31 + cmi32 + cmi33 + cmi34 + cmi35 + cmi36 + cmi37 + cmi38 + cmi39 + cmi40 + cmi41 + cmi42 + cmi43 + cmi44 + cmi45 + cmi46 + cmi47
PWB =~ pwb1 + pwb2 + pwb3 + pwb4 + pwb5 + pwb6 + pwb7 + pwb8 + pwb9 + pwb10
PWB ~ b*CMI + c_p*REMS
CMI ~a*REMS
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
"
test.model <- lavaan::sem(LVMed_model, data = dfKim)
lavaan::summary(test.model)
LVMed_model <- "
#measurement model
REMS =~ Inf32 + Inf38 + Inf21 + Inf17 + Inf9 + Inf36 + Inf5 + Inf22 + SClass6 + SClass31 + SClass8 + SClass40 + SClass2 + SClass34 + SClass11 + mInv27 + mInv30 + mInv39 + mInv7 + mInv26 + mInv33 + mInv4 + mInv14 + mInv10 + Exot3 + Exot29 + Exot45 + Exot35 + Exot42 + Exot23 + Exot13 + Exot20 + Exot43 + mEnv37 + mEnv24 + mEnv19 + mEnv28 + mEnv18 + mEnv41 + mEnv12 + mWork25 + mWork15 + mWork1 + mWork16 + mWork44
CMI =~ cmi1 + cmi2 + cmi3 + cmi4 + cmi5 + cmi6 + cmi7 + cmi8 + cmi9 + cmi10 + cmi11 + cmi12 + cmi13 + cmi14 + cmi15 + cmi16 + cmi17 + cmi18 + cmi19 + cmi20 + cmi21 + cmi22 + cmi23 + cmi24 + cmi25 + cmi26 + cmi27 + cmi28 + cmi29 + cmi30 + cmi31 + cmi32 + cmi33 + cmi34 + cmi35 + cmi36 + cmi37 + cmi38 + cmi39 + cmi40 + cmi41 + cmi42 + cmi43 + cmi44 + cmi45 + cmi46 + cmi47
PWB =~ pwb1 + pwb2 + pwb3 + pwb4 + pwb5 + pwb6 + pwb7 + pwb8 + pwb9 + pwb10
PWB ~ b*CMI + c_p*REMS
CMI ~a*REMS
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
"
test.model <- lavaan::sem(LVMed_model, data = dfKim)
lavaan::summary(test.model, standardized=T, rsq=T, fitmeasures=T)
LVMed_model <- "
#measurement model
REMS =~ Inf32 + Inf38 + Inf21 + Inf17 + Inf9 + Inf36 + Inf5 + Inf22 + SClass6 + SClass31 + SClass8 + SClass40 + SClass2 + SClass34 + SClass11 + mInv27 + mInv30 + mInv39 + mInv7 + mInv26 + mInv33 + mInv4 + mInv14 + mInv10 + Exot3 + Exot29 + Exot45 + Exot35 + Exot42 + Exot23 + Exot13 + Exot20 + Exot43 + mEnv37 + mEnv24 + mEnv19 + mEnv28 + mEnv18 + mEnv41 + mEnv12 + mWork25 + mWork15 + mWork1 + mWork16 + mWork44
CMI =~ cmi1 + cmi2 + cmi3 + cmi4 + cmi5 + cmi6 + cmi7 + cmi8 + cmi9 + cmi10 + cmi11 + cmi12 + cmi13 + cmi14 + cmi15 + cmi16 + cmi17 + cmi18 + cmi19 + cmi20 + cmi21 + cmi22 + cmi23 + cmi24 + cmi25 + cmi26 + cmi27 + cmi28 + cmi29 + cmi30 + cmi31 + cmi32 + cmi33 + cmi34 + cmi35 + cmi36 + cmi37 + cmi38 + cmi39 + cmi40 + cmi41 + cmi42 + cmi43 + cmi44 + cmi45 + cmi46 + cmi47
PWB =~ pwb1 + pwb2 + pwb3 + pwb4 + pwb5 + pwb6 + pwb7 + pwb8 + pwb9 + pwb10
PWB ~ b*CMI + c_p*REMS
CMI ~a*REMS
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
"
test.model <- lavaan::sem(LVMed_model, data = dfKim)
lavaan::summary(test.model, standardized=T, rsq=T)
lavaan::parameterEstimates(test.model)
LVMed_model <- "
#measurement model
REMS =~ Inf32 + Inf38 + Inf21 + Inf17 + Inf9 + Inf36 + Inf5 + Inf22 + SClass6 + SClass31 + SClass8 + SClass40 + SClass2 + SClass34 + SClass11 + mInv27 + mInv30 + mInv39 + mInv7 + mInv26 + mInv33 + mInv4 + mInv14 + mInv10 + Exot3 + Exot29 + Exot45 + Exot35 + Exot42 + Exot23 + Exot13 + Exot20 + Exot43 + mEnv37 + mEnv24 + mEnv19 + mEnv28 + mEnv18 + mEnv41 + mEnv12 + mWork25 + mWork15 + mWork1 + mWork16 + mWork44
CMI =~ cmi1 + cmi2 + cmi3 + cmi4 + cmi5 + cmi6 + cmi7 + cmi8 + cmi9 + cmi10 + cmi11 + cmi12 + cmi13 + cmi14 + cmi15 + cmi16 + cmi17 + cmi18 + cmi19 + cmi20 + cmi21 + cmi22 + cmi23 + cmi24 + cmi25 + cmi26 + cmi27 + cmi28 + cmi29 + cmi30 + cmi31 + cmi32 + cmi33 + cmi34 + cmi35 + cmi36 + cmi37 + cmi38 + cmi39 + cmi40 + cmi41 + cmi42 + cmi43 + cmi44 + cmi45 + cmi46 + cmi47
PWB =~ pwb1 + pwb2 + pwb3 + pwb4 + pwb5 + pwb6 + pwb7 + pwb8 + pwb9 + pwb10
PWB ~ b*CMI + c_p*REMS
CMI ~a*REMS
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
"
test.model <- lavaan::sem(LVMed_model, data = dfKim)
lavaan::summary(test.model, standardized=T, rsq=T, fit.measures=TRUE)
lavaan::parameterEstimates(test.model)
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(lavaan)){install.packages("lavaan")}
#if(!require(semPlot)){install.packages("semPlot")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(psych)){install.packages("psych")}
#if(!require(jtools)){install.packages("jtools")}
#Entering the intercorrelations, means, and standard deviations from the journal article
Kim_generating_model <- "
##measurement model
REMS =~ .82*Inf32 + .75*Inf38 + .74*Inf21 + .72*Inf17 + .69*Inf9 + .61*Inf36 + .51*Inf5 + .49*Inf22 + .81*SClass6 + .81*SClass31 + .74*SClass8 + .74*SClass40 + .72*SClass2 + .65*SClass34 + .55*SClass11 + .84*mInv27 + .84*mInv30 + .80*mInv39 + .72*mInv7 + .62*mInv26 + .61*mInv33 + .53*mInv4 + .47*mInv14 + .47*mInv10 + .74*Exot3 + .74*Exot29 + .71*Exot45 + .69*Exot35 + .60*Exot42 + .59*Exot23 + .51*Exot13 + .51*Exot20 + .49*Exot43 + .84*mEnv37 + .85*mEnv24 + .78*mEnv19 + .70*mEnv28 + .69*mEnv18 + .55*mEnv41 + .55*mEnv12 + .76*mWork25 + .67*mWork15 + .65*mWork1 + .64*mWork16 + .62*mWork44
CMI =~ .8*cmi1 + .8*cmi2 + .8*cmi3 + .8*cmi4 + .8*cmi5 + .8*cmi6 + .8*cmi7 + .8*cmi8 + .8*cmi9 + .8*cmi10 + .8*cmi11 + .8*cmi12 + .8*cmi13 + .8*cmi14 + .8*cmi15 + .8*cmi16 + .8*cmi17 + .8*cmi18 + .8*cmi19 + .8*cmi20 + .8*cmi21 + .8*cmi22 + .8*cmi23 + .8*cmi24 + .8*cmi25 + .8*cmi26 + .8*cmi27 + .8*cmi28 + .8*cmi29 + .8*cmi30 + .8*cmi31 + .8*cmi32 + .8*cmi33 + .8*cmi34 + .8*cmi35 + .8*cmi36 + .8*cmi37 + .8*cmi38 + .8*cmi39 + .8*cmi40 + .8*cmi41 + .8*cmi42 + .8*cmi43 + .8*cmi44 + .8*cmi45 + .8*cmi46 + .8*cmi47
ANX =~ .80*Anx1 + .80*Anx2 + .77*Anx3 + .74*Anx4 + .74*Anx5 + .69*Anx6 + .69*Anx7 + .68*Anx8 + .50*Anx9
DEP =~ .74*Dep1 + .83*Dep2 + .82*Dep3 + .74*Dep4
PWB =~ .83*pwb1 + .72*pwb2 + .67*pwb3 + .79*pwb4 + .77*pwb5 + .75*pwb6 + .74*pwb7 +.71*pwb8 +.67*pwb9 +.61*pwb10 +.58*pwb11
HlpSkg =~ .8*hlpskg1 + .8*hlpskg2 + .8*hlpskg3 + .8*hlpskg4 + .8*hlpskg5 + .8*hlpskg6 + .8*hlpskg7 + .8*hlpskg8 + .8*hlpskg9 + .8*hlpskg10
# Means
REMS ~ 0.34*1
CMI ~ 3*1
ANX ~ 2.98*1
DEP ~ 2.36*1
PWB ~ 3.5*1
HlpSkg ~ 1.64*1
# Correlations (ha!)
REMS ~ 0.58*CMI
REMS ~ 0.26*ANX
REMS ~ 0.34*DEP
REMS ~ -0.25*PWB
REMS ~ -0.02*HlpSkg
CMI ~ 0.12*ANX
CMI ~ 0.19*DEP
CMI ~ -0.28*PWB
CMI ~ 0*HlpSkg
ANX ~ 0.66*DEP
ANX ~ -0.55*PWB
ANX ~ 0.07*HlpSkg
DEP ~ -0.66*PWB
DEP ~ 0.05*HlpSkg
PWB ~ 0.08*HlpSkg
"
set.seed(230916)
dfKim <- lavaan::simulateData(model = Kim_generating_model,
model.type = "sem",
meanstructure = T,
sample.nobs=156,
standardized=FALSE)
library(tidyverse)
#used to retrieve column indices used in the rescaling script below
col_index <- as.data.frame(colnames(dfKim))
for(i in 1:ncol(dfKim)){  # for loop to go through each column of the dataframe
if(i >= 1 & i <= 45){   # apply only to REMS variables
dfKim[,i] <- scales::rescale(dfKim[,i], c(0, 1))
}
if(i >= 46 & i <= 116){   # apply only to CMI variables
dfKim[,i] <- scales::rescale(dfKim[,i], c(1, 7))
}
if(i >= 93 & i <= 116){   # apply only to mental health variables
dfKim[,i] <- scales::rescale(dfKim[,i], c(1, 5))
}
if(i >= 117 & i <= 126){   # apply only to HlpSkng variables
dfKim[,i] <- scales::rescale(dfKim[,i], c(0, 3))
}
}
#psych::describe(dfKim)+
library(tidyverse)
dfKim <- dfKim %>% round(0)
#I tested the rescaling the correlation between original and rescaled variables is 1.0
#Kim_df_latent$INF32 <- scales::rescale(Kim_df_latent$Inf32, c(0, 1))
#cor.test(Kim_df_latent$Inf32, Kim_df_latent$INF32, method="pearson")
#Checking our work against the original correlation matrix
#round(cor(Kim_df),3)
#saveRDS(dfKim, 'dfKim.rds')
# dfKim<- readRDS('dfKim.rds')
#write.table(dfKim, file = 'dfKim.csv', sep = ',', col.names=TRUE, row.names=FALSE)
# dfKim<- read.csv ('dfKim.csv', header = TRUE)
#set.seed(230925) #required for reproducible results because lavaan introduces randomness into the calculations
#MedFit <- lavaan::sem(LVMed_model, data = dfKim, se="bootstrap", missing = 'fiml')
#MedFitSum <-  lavaan::summary(Med_fit, standardized=T, rsq=T, ci=TRUE)
#MedFitParEsts<- lavaan::parameterEstimates(LMed_fit, boot.ci.type = "bca.simple", standardized=TRUE)
#LMed_MedFit
#MedFitParEsts
msmt_mod <- "
##measurement model
REMS =~ Inf32 + Inf38 + Inf21 + Inf17 + Inf9 + Inf36 + Inf5 + Inf22 + SClass6 + SClass31 + SClass8 + SClass40 + SClass2 + SClass34 + SClass11 + mInv27 + mInv30 + mInv39 + mInv7 + mInv26 + mInv33 + mInv4 + mInv14 + mInv10 + Exot3 + Exot29 + Exot45 + Exot35 + Exot42 + Exot23 + Exot13 + Exot20 + Exot43 + mEnv37 + mEnv24 + mEnv19 + mEnv28 + mEnv18 + mEnv41 + mEnv12 + mWork25 + mWork15 + mWork1 + mWork16 + mWork44
CMI =~ cmi1 + cmi2 + cmi3 + cmi4 + cmi5 + cmi6 + cmi7 + cmi8 + cmi9 + cmi10 + cmi11 + cmi12 + cmi13 + cmi14 + cmi15 + cmi16 + cmi17 + cmi18 + cmi19 + cmi20 + cmi21 + cmi22 + cmi23 + cmi24 + cmi25 + cmi26 + cmi27 + cmi28 + cmi29 + cmi30 + cmi31 + .8*cmi32 + cmi33 + cmi34 + cmi35 + cmi36 + cmi37 + cmi38 + cmi39 + cmi40 + cmi41 + cmi42 + cmi43 + cmi44 + cmi45 + cmi46 + cmi47
PWB =~ pwb1 + pwb2 + pwb3 + pwb4 + pwb5 + pwb6 + pwb7 + pwb8 + pwb9 + pwb10 + pwb11
# Covariances
REMS ~ CMI
REMS ~ PWB
CMI ~ PWB
"
set.seed(230916)
msmt_fit <- lavaan::cfa(msmt_mod, data = dfKim, missing = "fiml")
msmt_fit_sum <- lavaan::summary(msmt_fit, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
